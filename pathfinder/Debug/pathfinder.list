
pathfinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080052d0  080052d0  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d0  080052d0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080052d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc0  20000060  08005338  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c20  08005338  00007c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f5b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ff  00000000  00000000  0001efeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f0  00000000  00000000  00023f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206b7  00000000  00000000  00024ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017620  00000000  00000000  000456af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d03a9  00000000  00000000  0005cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ebc  00000000  00000000  0012d0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00132f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005258 	.word	0x08005258

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005258 	.word	0x08005258

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <MX_FREERTOS_Init+0x18>)
 8000226:	2100      	movs	r1, #0
 8000228:	4804      	ldr	r0, [pc, #16]	@ (800023c <MX_FREERTOS_Init+0x1c>)
 800022a:	f002 f9cb 	bl	80025c4 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a03      	ldr	r2, [pc, #12]	@ (8000240 <MX_FREERTOS_Init+0x20>)
 8000232:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08005294 	.word	0x08005294
 800023c:	08000245 	.word	0x08000245
 8000240:	2000007c 	.word	0x2000007c

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800024c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000254:	f000 fce2 	bl	8000c1c <HAL_GPIO_TogglePin>
    osDelay(250);
 8000258:	20fa      	movs	r0, #250	@ 0xfa
 800025a:	f002 fa45 	bl	80026e8 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800025e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000266:	f000 fcd9 	bl	8000c1c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800026a:	bf00      	nop
 800026c:	e7ee      	b.n	800024c <StartDefaultTask+0x8>
	...

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000286:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <MX_GPIO_Init+0x7c>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800028a:	4a18      	ldr	r2, [pc, #96]	@ (80002ec <MX_GPIO_Init+0x7c>)
 800028c:	f043 0320 	orr.w	r3, r3, #32
 8000290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000292:	4b16      	ldr	r3, [pc, #88]	@ (80002ec <MX_GPIO_Init+0x7c>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000296:	f003 0320 	and.w	r3, r3, #32
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <MX_GPIO_Init+0x7c>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002a2:	4a12      	ldr	r2, [pc, #72]	@ (80002ec <MX_GPIO_Init+0x7c>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <MX_GPIO_Init+0x7c>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f000 fc94 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 80002c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80002c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	4619      	mov	r1, r3
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e0:	f000 fb02 	bl	80008e8 <HAL_GPIO_Init>

}
 80002e4:	bf00      	nop
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 f9e1 	bl	80006ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f80c 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f7ff ffb8 	bl	8000270 <MX_GPIO_Init>
  MX_RTC_Init();
 8000300:	f000 f86e 	bl	80003e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000304:	f002 f914 	bl	8002530 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000308:	f7ff ff8a 	bl	8000220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800030c:	f002 f934 	bl	8002578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <main+0x20>

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b094      	sub	sp, #80	@ 0x50
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2238      	movs	r2, #56	@ 0x38
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f004 feb0 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fc8a 	bl	8000c50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800033c:	230a      	movs	r3, #10
 800033e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2340      	movs	r3, #64	@ 0x40
 8000348:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000352:	2302      	movs	r3, #2
 8000354:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000356:	2304      	movs	r3, #4
 8000358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800035a:	2355      	movs	r3, #85	@ 0x55
 800035c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800035e:	2302      	movs	r3, #2
 8000360:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000362:	2302      	movs	r3, #2
 8000364:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd22 	bl	8000db8 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037a:	f000 f82b 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2303      	movs	r3, #3
 8000384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2104      	movs	r1, #4
 8000396:	4618      	mov	r0, r3
 8000398:	f001 f820 	bl	80013dc <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003a2:	f000 f817 	bl	80003d4 <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3750      	adds	r7, #80	@ 0x50
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d101      	bne.n	80003c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003c2:	f000 f993 	bl	80006ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40012c00 	.word	0x40012c00

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <Error_Handler+0x8>

080003e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <MX_RTC_Init+0x50>)
 80003e6:	4a13      	ldr	r2, [pc, #76]	@ (8000434 <MX_RTC_Init+0x54>)
 80003e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_RTC_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_RTC_Init+0x50>)
 80003f2:	227f      	movs	r2, #127	@ 0x7f
 80003f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_RTC_Init+0x50>)
 80003f8:	22ff      	movs	r2, #255	@ 0xff
 80003fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <MX_RTC_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <MX_RTC_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <MX_RTC_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_RTC_Init+0x50>)
 8000410:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000414:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_RTC_Init+0x50>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800041c:	4804      	ldr	r0, [pc, #16]	@ (8000430 <MX_RTC_Init+0x50>)
 800041e:	f001 fc01 	bl	8001c24 <HAL_RTC_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000428:	f7ff ffd4 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000080 	.word	0x20000080
 8000434:	40002800 	.word	0x40002800

08000438 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b094      	sub	sp, #80	@ 0x50
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	2244      	movs	r2, #68	@ 0x44
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f004 fe1d 	bl	8005088 <memset>
  if(rtcHandle->Instance==RTC)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <HAL_RTC_MspInit+0x70>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d123      	bne.n	80004a0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000458:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800045c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800045e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000462:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	4618      	mov	r0, r3
 800046a:	f001 f9eb 	bl	8001844 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000474:	f7ff ffae 	bl	80003d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_RTC_MspInit+0x74>)
 800047a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800047e:	4a0b      	ldr	r2, [pc, #44]	@ (80004ac <HAL_RTC_MspInit+0x74>)
 8000480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_RTC_MspInit+0x74>)
 800048a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048c:	4a07      	ldr	r2, [pc, #28]	@ (80004ac <HAL_RTC_MspInit+0x74>)
 800048e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000492:	6593      	str	r3, [r2, #88]	@ 0x58
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <HAL_RTC_MspInit+0x74>)
 8000496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80004a0:	bf00      	nop
 80004a2:	3750      	adds	r7, #80	@ 0x50
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40002800 	.word	0x40002800
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <HAL_MspInit+0x60>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <HAL_MspInit+0x60>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004c2:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <HAL_MspInit+0x60>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_MspInit+0x60>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <HAL_MspInit+0x60>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <HAL_MspInit+0x60>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	210f      	movs	r1, #15
 80004ea:	f06f 0001 	mvn.w	r0, #1
 80004ee:	f000 f9d3 	bl	8000898 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2105      	movs	r1, #5
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 f9ce 	bl	8000898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80004fc:	2005      	movs	r0, #5
 80004fe:	f000 f9e5 	bl	80008cc <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000502:	f000 fc49 	bl	8000d98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	@ 0x30
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000524:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <HAL_InitTick+0xc4>)
 8000526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000528:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <HAL_InitTick+0xc4>)
 800052a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800052e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <HAL_InitTick+0xc4>)
 8000532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800053c:	f107 020c 	add.w	r2, r7, #12
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f906 	bl	8001758 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800054c:	f001 f8ee 	bl	800172c <HAL_RCC_GetPCLK2Freq>
 8000550:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000554:	4a21      	ldr	r2, [pc, #132]	@ (80005dc <HAL_InitTick+0xc8>)
 8000556:	fba2 2303 	umull	r2, r3, r2, r3
 800055a:	0c9b      	lsrs	r3, r3, #18
 800055c:	3b01      	subs	r3, #1
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000562:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <HAL_InitTick+0xd0>)
 8000564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000568:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800056c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000572:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <HAL_InitTick+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000580:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000582:	f001 fc6c 	bl	8001e5e <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800058c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000590:	2b00      	cmp	r3, #0
 8000592:	d11b      	bne.n	80005cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <HAL_InitTick+0xcc>)
 8000596:	f001 fcc3 	bl	8001f20 <HAL_TIM_Base_Start_IT>
 800059a:	4603      	mov	r3, r0
 800059c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80005a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d111      	bne.n	80005cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80005a8:	2019      	movs	r0, #25
 80005aa:	f000 f98f 	bl	80008cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d808      	bhi.n	80005c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	2019      	movs	r0, #25
 80005ba:	f000 f96d 	bl	8000898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <HAL_InitTick+0xd4>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	e002      	b.n	80005cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3730      	adds	r7, #48	@ 0x30
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	431bde83 	.word	0x431bde83
 80005e0:	200000a8 	.word	0x200000a8
 80005e4:	40012c00 	.word	0x40012c00
 80005e8:	20000004 	.word	0x20000004

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000636:	f001 fcdd 	bl	8001ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000a8 	.word	0x200000a8

08000644 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <SystemInit+0x20>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <SystemInit+0x20>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff ffea 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000696:	f004 fd55 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069a:	f7ff fe29 	bl	80002f0 <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   r0, =_estack
 80006a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006ac:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 80006b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006b4:	20001c20 	.word	0x20001c20

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>

080006ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f8dc 	bl	8000882 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ca:	200f      	movs	r0, #15
 80006cc:	f7ff ff22 	bl	8000514 <HAL_InitTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e001      	b.n	80006e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006dc:	f7ff fee8 	bl	80004b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e0:	79fb      	ldrb	r3, [r7, #7]

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x1c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <HAL_IncTick+0x1c>)
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	200000f4 	.word	0x200000f4
 800070c:	20000008 	.word	0x20000008

08000710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <HAL_GetTick+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	200000f4 	.word	0x200000f4

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4907      	ldr	r1, [pc, #28]	@ (80007c4 <__NVIC_EnableIRQ+0x38>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff4c 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a6:	f7ff ff63 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	68b9      	ldr	r1, [r7, #8]
 80008b0:	6978      	ldr	r0, [r7, #20]
 80008b2:	f7ff ffb3 	bl	800081c <NVIC_EncodePriority>
 80008b6:	4602      	mov	r2, r0
 80008b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff82 	bl	80007c8 <__NVIC_SetPriority>
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff56 	bl	800078c <__NVIC_EnableIRQ>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008f6:	e15a      	b.n	8000bae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 814c 	beq.w	8000ba8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 0201 	and.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80a6 	beq.w	8000ba8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bcc <HAL_GPIO_Init+0x2e4>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a60:	4a5a      	ldr	r2, [pc, #360]	@ (8000bcc <HAL_GPIO_Init+0x2e4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a68:	4b58      	ldr	r3, [pc, #352]	@ (8000bcc <HAL_GPIO_Init+0x2e4>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a74:	4a56      	ldr	r2, [pc, #344]	@ (8000bd0 <HAL_GPIO_Init+0x2e8>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a9e:	d01f      	beq.n	8000ae0 <HAL_GPIO_Init+0x1f8>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd4 <HAL_GPIO_Init+0x2ec>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d019      	beq.n	8000adc <HAL_GPIO_Init+0x1f4>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8000bd8 <HAL_GPIO_Init+0x2f0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d013      	beq.n	8000ad8 <HAL_GPIO_Init+0x1f0>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8000bdc <HAL_GPIO_Init+0x2f4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d00d      	beq.n	8000ad4 <HAL_GPIO_Init+0x1ec>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a49      	ldr	r2, [pc, #292]	@ (8000be0 <HAL_GPIO_Init+0x2f8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d007      	beq.n	8000ad0 <HAL_GPIO_Init+0x1e8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a48      	ldr	r2, [pc, #288]	@ (8000be4 <HAL_GPIO_Init+0x2fc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d101      	bne.n	8000acc <HAL_GPIO_Init+0x1e4>
 8000ac8:	2305      	movs	r3, #5
 8000aca:	e00a      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000acc:	2306      	movs	r3, #6
 8000ace:	e008      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e004      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <HAL_GPIO_Init+0x1fa>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	f002 0203 	and.w	r2, r2, #3
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	4093      	lsls	r3, r2
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af2:	4937      	ldr	r1, [pc, #220]	@ (8000bd0 <HAL_GPIO_Init+0x2e8>)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b00:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b24:	4a30      	ldr	r2, [pc, #192]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4e:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b78:	4a1b      	ldr	r2, [pc, #108]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba2:	4a11      	ldr	r2, [pc, #68]	@ (8000be8 <HAL_GPIO_Init+0x300>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f ae9d 	bne.w	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48001000 	.word	0x48001000
 8000be4:	48001400 	.word	0x48001400
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43d9      	mvns	r1, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	619a      	str	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d141      	bne.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6a:	d131      	bne.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c6c:	4b47      	ldr	r3, [pc, #284]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c72:	4a46      	ldr	r2, [pc, #280]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	4b43      	ldr	r3, [pc, #268]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c84:	4a41      	ldr	r2, [pc, #260]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c8c:	4b40      	ldr	r3, [pc, #256]	@ (8000d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2232      	movs	r2, #50	@ 0x32
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4a3f      	ldr	r2, [pc, #252]	@ (8000d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0c9b      	lsrs	r3, r3, #18
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ca2:	e002      	b.n	8000caa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000caa:	4b38      	ldr	r3, [pc, #224]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb6:	d102      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f2      	bne.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cbe:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cca:	d158      	bne.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e057      	b.n	8000d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ce0:	e04d      	b.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ce8:	d141      	bne.n	8000d6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cea:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf6:	d131      	bne.n	8000d5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cf8:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cfe:	4a23      	ldr	r2, [pc, #140]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d10:	4a1e      	ldr	r2, [pc, #120]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2232      	movs	r2, #50	@ 0x32
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4a1c      	ldr	r2, [pc, #112]	@ (8000d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	0c9b      	lsrs	r3, r3, #18
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d2e:	e002      	b.n	8000d36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d42:	d102      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f2      	bne.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d56:	d112      	bne.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e011      	b.n	8000d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d6c:	e007      	b.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	20000000 	.word	0x20000000
 8000d94:	431bde83 	.word	0x431bde83

08000d98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da6:	6093      	str	r3, [r2, #8]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40007000 	.word	0x40007000

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e2fe      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d075      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd6:	4b97      	ldr	r3, [pc, #604]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000de0:	4b94      	ldr	r3, [pc, #592]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	2b0c      	cmp	r3, #12
 8000dee:	d102      	bne.n	8000df6 <HAL_RCC_OscConfig+0x3e>
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d002      	beq.n	8000dfc <HAL_RCC_OscConfig+0x44>
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d10b      	bne.n	8000e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d05b      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x108>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d157      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e2d9      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1c:	d106      	bne.n	8000e2c <HAL_RCC_OscConfig+0x74>
 8000e1e:	4b85      	ldr	r3, [pc, #532]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a84      	ldr	r2, [pc, #528]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01d      	b.n	8000e68 <HAL_RCC_OscConfig+0xb0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x98>
 8000e36:	4b7f      	ldr	r3, [pc, #508]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b7c      	ldr	r3, [pc, #496]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a7b      	ldr	r2, [pc, #492]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xb0>
 8000e50:	4b78      	ldr	r3, [pc, #480]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a77      	ldr	r2, [pc, #476]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b75      	ldr	r3, [pc, #468]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a74      	ldr	r2, [pc, #464]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc4e 	bl	8000710 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fc4a 	bl	8000710 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	@ 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e29e      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0xc0>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc3a 	bl	8000710 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc36 	bl	8000710 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e28a      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eb2:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xe8>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d075      	beq.n	8000fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ece:	4b59      	ldr	r3, [pc, #356]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed8:	4b56      	ldr	r3, [pc, #344]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2b0c      	cmp	r3, #12
 8000ee6:	d102      	bne.n	8000eee <HAL_RCC_OscConfig+0x136>
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d002      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x13c>
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d11f      	bne.n	8000f34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_OscConfig+0x154>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e25d      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4946      	ldr	r1, [pc, #280]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f20:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_RCC_OscConfig+0x280>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff faf5 	bl	8000514 <HAL_InitTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d043      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e249      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3c      	ldr	r2, [pc, #240]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fbe2 	bl	8000710 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fbde 	bl	8000710 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e232      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f62:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6e:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	492d      	ldr	r1, [pc, #180]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
 8000f82:	e01a      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2a      	ldr	r2, [pc, #168]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f90:	f7ff fbbe 	bl	8000710 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f98:	f7ff fbba 	bl	8000710 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e20e      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1e0>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d041      	beq.n	800104a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d01c      	beq.n	8001008 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd4:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	f7ff fb97 	bl	8000710 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fb93 	bl	8000710 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e1e7      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0ef      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x22e>
 8001006:	e020      	b.n	800104a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 800100a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_RCC_OscConfig+0x27c>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001018:	f7ff fb7a 	bl	8000710 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800101e:	e00d      	b.n	800103c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fb76 	bl	8000710 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d906      	bls.n	800103c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ca      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103c:	4b8c      	ldr	r3, [pc, #560]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800103e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ea      	bne.n	8001020 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80a6 	beq.w	80011a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800105c:	4b84      	ldr	r3, [pc, #528]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_OscConfig+0x2b4>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x2b6>
 800106c:	2300      	movs	r3, #0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b7f      	ldr	r3, [pc, #508]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	4a7e      	ldr	r2, [pc, #504]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	@ 0x58
 800107e:	4b7c      	ldr	r3, [pc, #496]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800108a:	2301      	movs	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800108e:	4b79      	ldr	r3, [pc, #484]	@ (8001274 <HAL_RCC_OscConfig+0x4bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d118      	bne.n	80010cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800109a:	4b76      	ldr	r3, [pc, #472]	@ (8001274 <HAL_RCC_OscConfig+0x4bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a75      	ldr	r2, [pc, #468]	@ (8001274 <HAL_RCC_OscConfig+0x4bc>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb33 	bl	8000710 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff fb2f 	bl	8000710 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e183      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001274 <HAL_RCC_OscConfig+0x4bc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d108      	bne.n	80010e6 <HAL_RCC_OscConfig+0x32e>
 80010d4:	4b66      	ldr	r3, [pc, #408]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80010d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010da:	4a65      	ldr	r2, [pc, #404]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010e4:	e024      	b.n	8001130 <HAL_RCC_OscConfig+0x378>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	d110      	bne.n	8001110 <HAL_RCC_OscConfig+0x358>
 80010ee:	4b60      	ldr	r3, [pc, #384]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001104:	4a5a      	ldr	r2, [pc, #360]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800110e:	e00f      	b.n	8001130 <HAL_RCC_OscConfig+0x378>
 8001110:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001116:	4a56      	ldr	r2, [pc, #344]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001120:	4b53      	ldr	r3, [pc, #332]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001126:	4a52      	ldr	r2, [pc, #328]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d016      	beq.n	8001166 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff faea 	bl	8000710 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	e00a      	b.n	8001156 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff fae6 	bl	8000710 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e138      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001156:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0ed      	beq.n	8001140 <HAL_RCC_OscConfig+0x388>
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff fad3 	bl	8000710 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	e00a      	b.n	8001184 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff facf 	bl	8000710 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800117c:	4293      	cmp	r3, r2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e121      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001184:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ed      	bne.n	800116e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119c:	4a34      	ldr	r2, [pc, #208]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800119e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d03c      	beq.n	800122a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01c      	beq.n	80011f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011be:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff faa2 	bl	8000710 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d0:	f7ff fa9e 	bl	8000710 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e0f2      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80011e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ef      	beq.n	80011d0 <HAL_RCC_OscConfig+0x418>
 80011f0:	e01b      	b.n	800122a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80011f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001202:	f7ff fa85 	bl	8000710 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800120a:	f7ff fa81 	bl	8000710 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0d5      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ef      	bne.n	800120a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80c9 	beq.w	80013c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b0c      	cmp	r3, #12
 800123e:	f000 8083 	beq.w	8001348 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d15e      	bne.n	8001308 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_RCC_OscConfig+0x4b8>)
 8001250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fa5b 	bl	8000710 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800125c:	e00c      	b.n	8001278 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff fa57 	bl	8000710 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d905      	bls.n	8001278 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0ab      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
 8001270:	40021000 	.word	0x40021000
 8001274:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001278:	4b55      	ldr	r3, [pc, #340]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1ec      	bne.n	800125e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001284:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4b52      	ldr	r3, [pc, #328]	@ (80013d4 <HAL_RCC_OscConfig+0x61c>)
 800128a:	4013      	ands	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6a11      	ldr	r1, [r2, #32]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001294:	3a01      	subs	r2, #1
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	4311      	orrs	r1, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800129e:	0212      	lsls	r2, r2, #8
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012a6:	0852      	lsrs	r2, r2, #1
 80012a8:	3a01      	subs	r2, #1
 80012aa:	0552      	lsls	r2, r2, #21
 80012ac:	4311      	orrs	r1, r2
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012b2:	0852      	lsrs	r2, r2, #1
 80012b4:	3a01      	subs	r2, #1
 80012b6:	0652      	lsls	r2, r2, #25
 80012b8:	4311      	orrs	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012be:	06d2      	lsls	r2, r2, #27
 80012c0:	430a      	orrs	r2, r1
 80012c2:	4943      	ldr	r1, [pc, #268]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c8:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a40      	ldr	r2, [pc, #256]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012d4:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa16 	bl	8000710 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fa12 	bl	8000710 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e066      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012fa:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x530>
 8001306:	e05e      	b.n	80013c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001308:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 800130e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff f9fc 	bl	8000710 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff f9f8 	bl	8000710 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e04c      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	4924      	ldr	r1, [pc, #144]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <HAL_RCC_OscConfig+0x620>)
 8001342:	4013      	ands	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
 8001346:	e03e      	b.n	80013c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e039      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_RCC_OscConfig+0x618>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	429a      	cmp	r2, r3
 8001366:	d12c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d123      	bne.n	80013c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d113      	bne.n	80013c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	3b01      	subs	r3, #1
 80013a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	3b01      	subs	r3, #1
 80013bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013be:	429a      	cmp	r2, r3
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	019f800c 	.word	0x019f800c
 80013d8:	feeefffc 	.word	0xfeeefffc

080013dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e11e      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b91      	ldr	r3, [pc, #580]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d910      	bls.n	8001424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b8e      	ldr	r3, [pc, #568]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 020f 	bic.w	r2, r3, #15
 800140a:	498c      	ldr	r1, [pc, #560]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b8a      	ldr	r3, [pc, #552]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e106      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d073      	beq.n	8001518 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d129      	bne.n	800148c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001438:	4b81      	ldr	r3, [pc, #516]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0f4      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001448:	f000 f9b8 	bl	80017bc <RCC_GetSysClockFreqFromPLLSource>
 800144c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4a7c      	ldr	r2, [pc, #496]	@ (8001644 <HAL_RCC_ClockConfig+0x268>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d93f      	bls.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001456:	4b7a      	ldr	r3, [pc, #488]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800146a:	2b00      	cmp	r3, #0
 800146c:	d033      	beq.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001472:	2b00      	cmp	r3, #0
 8001474:	d12f      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800147e:	4a70      	ldr	r2, [pc, #448]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e024      	b.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d109      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0c6      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	4b66      	ldr	r3, [pc, #408]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0be      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014b4:	f000 f8ce 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4a61      	ldr	r2, [pc, #388]	@ (8001644 <HAL_RCC_ClockConfig+0x268>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d909      	bls.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4957      	ldr	r1, [pc, #348]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e8:	f7ff f912 	bl	8000710 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff f90e 	bl	8000710 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e095      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800153a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001548:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001550:	4a3b      	ldr	r2, [pc, #236]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4936      	ldr	r1, [pc, #216]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
 800156a:	e008      	b.n	800157e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b80      	cmp	r3, #128	@ 0x80
 8001570:	d105      	bne.n	800157e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800157c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800157e:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d21d      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 020f 	bic.w	r2, r3, #15
 8001594:	4929      	ldr	r1, [pc, #164]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800159c:	f7ff f8b8 	bl	8000710 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff f8b4 	bl	8000710 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e03b      	b.n	8001632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_RCC_ClockConfig+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1ed      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4917      	ldr	r1, [pc, #92]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490f      	ldr	r1, [pc, #60]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001606:	f000 f825 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_RCC_ClockConfig+0x264>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490c      	ldr	r1, [pc, #48]	@ (8001648 <HAL_RCC_ClockConfig+0x26c>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_RCC_ClockConfig+0x270>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_RCC_ClockConfig+0x274>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff72 	bl	8000514 <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	04c4b400 	.word	0x04c4b400
 8001648:	080052b8 	.word	0x080052b8
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800165a:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d102      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e047      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d102      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_RCC_GetSysClockFreq+0xbc>)
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e03e      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d136      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	4a16      	ldr	r2, [pc, #88]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b2:	68d2      	ldr	r2, [r2, #12]
 80016b4:	0a12      	lsrs	r2, r2, #8
 80016b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
      break;
 80016c0:	e00c      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016c2:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016cc:	68d2      	ldr	r2, [r2, #12]
 80016ce:	0a12      	lsrs	r2, r2, #8
 80016d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
      break;
 80016da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0e5b      	lsrs	r3, r3, #25
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	3301      	adds	r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e001      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016fc:	693b      	ldr	r3, [r7, #16]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	00f42400 	.word	0x00f42400

08001714 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_RCC_GetHCLKFreq+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001730:	f7ff fff0 	bl	8001714 <HAL_RCC_GetHCLKFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	0adb      	lsrs	r3, r3, #11
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4904      	ldr	r1, [pc, #16]	@ (8001754 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	080052c8 	.word	0x080052c8

08001758 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	220f      	movs	r2, #15
 8001766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_GetClockConfig+0x5c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <HAL_RCC_GetClockConfig+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 020f 	and.w	r2, r3, #15
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40022000 	.word	0x40022000

080017bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d10c      	bne.n	80017fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ea:	68d2      	ldr	r2, [r2, #12]
 80017ec:	0a12      	lsrs	r2, r2, #8
 80017ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
    break;
 80017f8:	e00c      	b.n	8001814 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017fa:	4a11      	ldr	r2, [pc, #68]	@ (8001840 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	0a12      	lsrs	r2, r2, #8
 8001808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    break;
 8001812:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0e5b      	lsrs	r3, r3, #25
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	00f42400 	.word	0x00f42400

08001844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800184c:	2300      	movs	r3, #0
 800184e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001850:	2300      	movs	r3, #0
 8001852:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8098 	beq.w	8001992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	4a3f      	ldr	r2, [pc, #252]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6593      	str	r3, [r2, #88]	@ 0x58
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a39      	ldr	r2, [pc, #228]	@ (8001978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800189a:	f7fe ff39 	bl	8000710 <HAL_GetTick>
 800189e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018a0:	e009      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7fe ff35 	bl	8000710 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d902      	bls.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	74fb      	strb	r3, [r7, #19]
        break;
 80018b4:	e005      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b6:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0ef      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d159      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01e      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d019      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001906:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001910:	4a18      	ldr	r2, [pc, #96]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7fe fef5 	bl	8000710 <HAL_GetTick>
 8001926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001928:	e00b      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7fe fef1 	bl	8000710 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d902      	bls.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	74fb      	strb	r3, [r7, #19]
            break;
 8001940:	e006      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ec      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001950:	7cfb      	ldrb	r3, [r7, #19]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10b      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800196c:	e008      	b.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	74bb      	strb	r3, [r7, #18]
 8001972:	e005      	b.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001974:	40021000 	.word	0x40021000
 8001978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800197c:	7cfb      	ldrb	r3, [r7, #19]
 800197e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001980:	7c7b      	ldrb	r3, [r7, #17]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d105      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001986:	4ba6      	ldr	r3, [pc, #664]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4aa5      	ldr	r2, [pc, #660]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800198c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800199e:	4ba0      	ldr	r3, [pc, #640]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a4:	f023 0203 	bic.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	499c      	ldr	r1, [pc, #624]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019c0:	4b97      	ldr	r3, [pc, #604]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	f023 020c 	bic.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4994      	ldr	r1, [pc, #592]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019e2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	498b      	ldr	r1, [pc, #556]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a04:	4b86      	ldr	r3, [pc, #536]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4983      	ldr	r1, [pc, #524]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a26:	4b7e      	ldr	r3, [pc, #504]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	497a      	ldr	r1, [pc, #488]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a48:	4b75      	ldr	r3, [pc, #468]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4972      	ldr	r1, [pc, #456]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4969      	ldr	r1, [pc, #420]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a8c:	4b64      	ldr	r3, [pc, #400]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4961      	ldr	r1, [pc, #388]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aae:	4b5c      	ldr	r3, [pc, #368]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	4958      	ldr	r1, [pc, #352]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d015      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	4950      	ldr	r1, [pc, #320]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aee:	d105      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001af0:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001afa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b08:	4b45      	ldr	r3, [pc, #276]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	4942      	ldr	r1, [pc, #264]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b26:	d105      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b28:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b32:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4934      	ldr	r1, [pc, #208]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b60:	4b2f      	ldr	r3, [pc, #188]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a2e      	ldr	r2, [pc, #184]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d015      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b78:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	4926      	ldr	r1, [pc, #152]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ba2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	4918      	ldr	r1, [pc, #96]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bce:	d105      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf6:	490a      	ldr	r1, [pc, #40]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c06:	d105      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001c14:	7cbb      	ldrb	r3, [r7, #18]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d070      	beq.n	8001d18 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fbf4 	bl	8000438 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d04f      	beq.n	8001d06 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	22ca      	movs	r2, #202	@ 0xca
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2253      	movs	r2, #83	@ 0x53
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f878 	bl	8001d6c <RTC_EnterInitMode>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d126      	bne.n	8001cd4 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8001c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c98:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6999      	ldr	r1, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f884 	bl	8001dd8 <RTC_ExitInitMode>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	22ff      	movs	r2, #255	@ 0xff
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d04:	e001      	b.n	8001d0a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_RTC_WaitForSynchro+0x44>)
 8001d32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001d34:	f7fe fcec 	bl	8000710 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8001d3a:	e009      	b.n	8001d50 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d3c:	f7fe fce8 	bl	8000710 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d4a:	d901      	bls.n	8001d50 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e007      	b.n	8001d60 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0001005f 	.word	0x0001005f

08001d6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d123      	bne.n	8001dce <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d96:	f7fe fcbb 	bl	8000710 <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d9c:	e00d      	b.n	8001dba <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d9e:	f7fe fcb7 	bl	8000710 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dac:	d905      	bls.n	8001dba <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <RTC_EnterInitMode+0x62>
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d1e7      	bne.n	8001d9e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff8e 	bl	8001d24 <HAL_RTC_WaitForSynchro>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d022      	beq.n	8001e54 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2203      	movs	r2, #3
 8001e12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e01b      	b.n	8001e54 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0220 	bic.w	r2, r2, #32
 8001e2a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff79 	bl	8001d24 <HAL_RTC_WaitForSynchro>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e049      	b.n	8001f04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f841 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f000 fa21 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e04a      	b.n	8001fce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_TIM_Base_Start_IT+0xbc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d018      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x6c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f62:	d013      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x6c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00e      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x6c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x6c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x6c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_TIM_Base_Start_IT+0xcc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d115      	bne.n	8001fb8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d015      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0xaa>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa4:	d011      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb6:	e008      	b.n	8001fca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e000      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40013400 	.word	0x40013400
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	00010007 	.word	0x00010007

08001ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d020      	beq.n	8002058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0202 	mvn.w	r2, #2
 8002028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f931 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f923 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f934 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0204 	mvn.w	r2, #4
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f90b 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8fd 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f90e 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0208 	mvn.w	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8e5 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8d7 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8e8 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8bf 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8b1 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8c2 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe f928 	bl	80003b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f951 	bl	8002430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00c      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80021aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f949 	bl	8002444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f87c 	bl	80022ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 0220 	mvn.w	r2, #32
 80021f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f911 	bl	800241c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f91d 	bl	8002458 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800223a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f915 	bl	800246c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00c      	beq.n	8002266 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800225e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f90d 	bl	8002480 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00c      	beq.n	800228a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f905 	bl	8002494 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a42      	ldr	r2, [pc, #264]	@ (8002400 <TIM_Base_SetConfig+0x11c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00f      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3f      	ldr	r2, [pc, #252]	@ (8002404 <TIM_Base_SetConfig+0x120>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3e      	ldr	r2, [pc, #248]	@ (8002408 <TIM_Base_SetConfig+0x124>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3d      	ldr	r2, [pc, #244]	@ (800240c <TIM_Base_SetConfig+0x128>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a33      	ldr	r2, [pc, #204]	@ (8002400 <TIM_Base_SetConfig+0x11c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01b      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d017      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <TIM_Base_SetConfig+0x120>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2f      	ldr	r2, [pc, #188]	@ (8002408 <TIM_Base_SetConfig+0x124>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2e      	ldr	r2, [pc, #184]	@ (800240c <TIM_Base_SetConfig+0x128>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00b      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <TIM_Base_SetConfig+0x12c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2c      	ldr	r2, [pc, #176]	@ (8002414 <TIM_Base_SetConfig+0x130>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2b      	ldr	r2, [pc, #172]	@ (8002418 <TIM_Base_SetConfig+0x134>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <TIM_Base_SetConfig+0x11c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00f      	beq.n	80023cc <TIM_Base_SetConfig+0xe8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a17      	ldr	r2, [pc, #92]	@ (800240c <TIM_Base_SetConfig+0x128>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00b      	beq.n	80023cc <TIM_Base_SetConfig+0xe8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a16      	ldr	r2, [pc, #88]	@ (8002410 <TIM_Base_SetConfig+0x12c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <TIM_Base_SetConfig+0xe8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <TIM_Base_SetConfig+0x130>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0xe8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <TIM_Base_SetConfig+0x134>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f023 0201 	bic.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
  }
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40013400 	.word	0x40013400
 8002410:	40014000 	.word	0x40014000
 8002414:	40014400 	.word	0x40014400
 8002418:	40014800 	.word	0x40014800

0800241c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <__NVIC_SetPriority>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SysTick_Handler+0x1c>)
 8002502:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002504:	f001 fd46 	bl	8003f94 <xTaskGetSchedulerState>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800250e:	f002 fb3b 	bl	8004b88 <xPortSysTickHandler>
  }
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002520:	2100      	movs	r1, #0
 8002522:	f06f 0004 	mvn.w	r0, #4
 8002526:	f7ff ffbf 	bl	80024a8 <__NVIC_SetPriority>
#endif
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002536:	f3ef 8305 	mrs	r3, IPSR
 800253a:	603b      	str	r3, [r7, #0]
  return(result);
 800253c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002542:	f06f 0305 	mvn.w	r3, #5
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	e00c      	b.n	8002564 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <osKernelInitialize+0x44>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <osKernelInitialize+0x44>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	e002      	b.n	8002564 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200000f8 	.word	0x200000f8

08002578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800257e:	f3ef 8305 	mrs	r3, IPSR
 8002582:	603b      	str	r3, [r7, #0]
  return(result);
 8002584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <osKernelStart+0x1a>
    stat = osErrorISR;
 800258a:	f06f 0305 	mvn.w	r3, #5
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	e010      	b.n	80025b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <osKernelStart+0x48>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d109      	bne.n	80025ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800259a:	f7ff ffbf 	bl	800251c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <osKernelStart+0x48>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025a4:	f001 f892 	bl	80036cc <vTaskStartScheduler>
      stat = osOK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	e002      	b.n	80025b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200000f8 	.word	0x200000f8

080025c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	@ 0x38
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d4:	f3ef 8305 	mrs	r3, IPSR
 80025d8:	617b      	str	r3, [r7, #20]
  return(result);
 80025da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d17e      	bne.n	80026de <osThreadNew+0x11a>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d07b      	beq.n	80026de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025ea:	2318      	movs	r3, #24
 80025ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d045      	beq.n	800268a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <osThreadNew+0x48>
        name = attr->name;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <osThreadNew+0x6e>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b38      	cmp	r3, #56	@ 0x38
 8002624:	d805      	bhi.n	8002632 <osThreadNew+0x6e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <osThreadNew+0x72>
        return (NULL);
 8002632:	2300      	movs	r3, #0
 8002634:	e054      	b.n	80026e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <osThreadNew+0xa8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2ba7      	cmp	r3, #167	@ 0xa7
 8002654:	d90a      	bls.n	800266c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <osThreadNew+0xa8>
        mem = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e010      	b.n	800268e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10c      	bne.n	800268e <osThreadNew+0xca>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d108      	bne.n	800268e <osThreadNew+0xca>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <osThreadNew+0xca>
          mem = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e001      	b.n	800268e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fe1a 	bl	80032e4 <xTaskCreateStatic>
 80026b0:	4603      	mov	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e013      	b.n	80026de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d110      	bne.n	80026de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fe68 	bl	80033a4 <xTaskCreate>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <osThreadNew+0x11a>
            hTask = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026de:	693b      	ldr	r3, [r7, #16]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f0:	f3ef 8305 	mrs	r3, IPSR
 80026f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <osDelay+0x1c>
    stat = osErrorISR;
 80026fc:	f06f 0305 	mvn.w	r3, #5
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e007      	b.n	8002714 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <osDelay+0x2c>
      vTaskDelay(ticks);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ffa6 	bl	8003660 <vTaskDelay>
    }
  }

  return (stat);
 8002714:	68fb      	ldr	r3, [r7, #12]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <vApplicationGetIdleTaskMemory+0x2c>)
 8002730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <vApplicationGetIdleTaskMemory+0x30>)
 8002736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200000fc 	.word	0x200000fc
 8002750:	200001a4 	.word	0x200001a4

08002754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <vApplicationGetTimerTaskMemory+0x2c>)
 8002764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4a06      	ldr	r2, [pc, #24]	@ (8002784 <vApplicationGetTimerTaskMemory+0x30>)
 800276a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200003a4 	.word	0x200003a4
 8002784:	2000044c 	.word	0x2000044c

08002788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f103 0208 	add.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0208 	add.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002840:	d103      	bne.n	800284a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e00c      	b.n	8002864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3308      	adds	r3, #8
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e002      	b.n	8002858 <vListInsert+0x2e>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d2f6      	bcs.n	8002852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6852      	ldr	r2, [r2, #4]
 80028bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d103      	bne.n	80028d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800291c:	f002 f8a4 	bl	8004a68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	441a      	add	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	3b01      	subs	r3, #1
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	22ff      	movs	r2, #255	@ 0xff
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	22ff      	movs	r2, #255	@ 0xff
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01a      	beq.n	80029b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3310      	adds	r3, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f942 	bl	8003c08 <xTaskRemoveFromEventList>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <xQueueGenericReset+0xd0>)
 800298c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	e009      	b.n	80029b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3310      	adds	r3, #16
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fef1 	bl	8002788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3324      	adds	r3, #36	@ 0x24
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff feec 	bl	8002788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029b0:	f002 f88c 	bl	8004acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08e      	sub	sp, #56	@ 0x38
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <xQueueGenericCreateStatic+0x56>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <xQueueGenericCreateStatic+0x5a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <xQueueGenericCreateStatic+0x5c>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	623b      	str	r3, [r7, #32]
}
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <xQueueGenericCreateStatic+0x84>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <xQueueGenericCreateStatic+0x88>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <xQueueGenericCreateStatic+0x8a>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	61fb      	str	r3, [r7, #28]
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	e7fd      	b.n	8002a66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a6a:	2350      	movs	r3, #80	@ 0x50
 8002a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b50      	cmp	r3, #80	@ 0x50
 8002a72:	d00b      	beq.n	8002a8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	61bb      	str	r3, [r7, #24]
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f805 	bl	8002abe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3730      	adds	r7, #48	@ 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e002      	b.n	8002ae0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aec:	2101      	movs	r1, #1
 8002aee:	69b8      	ldr	r0, [r7, #24]
 8002af0:	f7ff fefe 	bl	80028f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	@ 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <xQueueGenericSend+0x34>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSend+0x42>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <xQueueGenericSend+0x46>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericSend+0x48>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <xQueueGenericSend+0x64>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d103      	bne.n	8002b76 <xQueueGenericSend+0x72>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <xQueueGenericSend+0x76>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericSend+0x78>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <xQueueGenericSend+0x94>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b98:	f001 f9fc 	bl	8003f94 <xTaskGetSchedulerState>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <xQueueGenericSend+0xa4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <xQueueGenericSend+0xa8>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <xQueueGenericSend+0xaa>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xQueueGenericSend+0xc6>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	61fb      	str	r3, [r7, #28]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bca:	f001 ff4d 	bl	8004a68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <xQueueGenericSend+0xdc>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d129      	bne.n	8002c34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002be6:	f000 fa0f 	bl	8003008 <prvCopyDataToQueue>
 8002bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	3324      	adds	r3, #36	@ 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 f805 	bl	8003c08 <xTaskRemoveFromEventList>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c04:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	e00a      	b.n	8002c2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c2c:	f001 ff4e 	bl	8004acc <vPortExitCritical>
				return pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e063      	b.n	8002cfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c3a:	f001 ff47 	bl	8004acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e05c      	b.n	8002cfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f83f 	bl	8003cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c56:	f001 ff39 	bl	8004acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c5a:	f000 fda7 	bl	80037ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5e:	f001 ff03 	bl	8004a68 <vPortEnterCritical>
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c6e:	d103      	bne.n	8002c78 <xQueueGenericSend+0x174>
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSend+0x18a>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8e:	f001 ff1d 	bl	8004acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f82e 	bl	8003cfc <xTaskCheckForTimeOut>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d124      	bne.n	8002cf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ca8:	f000 faa6 	bl	80031f8 <prvIsQueueFull>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 ff52 	bl	8003b64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cc2:	f000 fa31 	bl	8003128 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cc6:	f000 fd7f 	bl	80037c8 <xTaskResumeAll>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af7c 	bne.w	8002bca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <xQueueGenericSend+0x200>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	e772      	b.n	8002bca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce6:	f000 fa1f 	bl	8003128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cea:	f000 fd6d 	bl	80037c8 <xTaskResumeAll>
 8002cee:	e76c      	b.n	8002bca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cf2:	f000 fa19 	bl	8003128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf6:	f000 fd67 	bl	80037c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3738      	adds	r7, #56	@ 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b090      	sub	sp, #64	@ 0x40
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSendFromISR+0x3e>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <xQueueGenericSendFromISR+0x42>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericSendFromISR+0x44>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d103      	bne.n	8002d76 <xQueueGenericSendFromISR+0x6e>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <xQueueGenericSendFromISR+0x72>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xQueueGenericSendFromISR+0x74>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	623b      	str	r3, [r7, #32]
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d98:	f001 ff46 	bl	8004c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d9c:	f3ef 8211 	mrs	r2, BASEPRI
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61fa      	str	r2, [r7, #28]
 8002db2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002db4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <xQueueGenericSendFromISR+0xc2>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d12f      	bne.n	8002e2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002de0:	f000 f912 	bl	8003008 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002de4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dec:	d112      	bne.n	8002e14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	3324      	adds	r3, #36	@ 0x24
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ff04 	bl	8003c08 <xTaskRemoveFromEventList>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e007      	b.n	8002e24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e24:	2301      	movs	r3, #1
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002e28:	e001      	b.n	8002e2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3740      	adds	r7, #64	@ 0x40
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	@ 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <xQueueReceive+0x32>
	__asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	623b      	str	r3, [r7, #32]
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0x40>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueReceive+0x44>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueReceive+0x46>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <xQueueReceive+0x62>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	61fb      	str	r3, [r7, #28]
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	e7fd      	b.n	8002ea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 f875 	bl	8003f94 <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueReceive+0x72>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueReceive+0x76>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueReceive+0x78>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <xQueueReceive+0x94>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61bb      	str	r3, [r7, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed8:	f001 fdc6 	bl	8004a68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01f      	beq.n	8002f28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eec:	f000 f8f6 	bl	80030dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00f      	beq.n	8002f20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	3310      	adds	r3, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fe7f 	bl	8003c08 <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f10:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <xQueueReceive+0x1c0>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f20:	f001 fdd4 	bl	8004acc <vPortExitCritical>
				return pdPASS;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e069      	b.n	8002ffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d103      	bne.n	8002f36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2e:	f001 fdcd 	bl	8004acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e062      	b.n	8002ffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fec5 	bl	8003cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f4a:	f001 fdbf 	bl	8004acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4e:	f000 fc2d 	bl	80037ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f52:	f001 fd89 	bl	8004a68 <vPortEnterCritical>
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f62:	d103      	bne.n	8002f6c <xQueueReceive+0x128>
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f78:	d103      	bne.n	8002f82 <xQueueReceive+0x13e>
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f82:	f001 fda3 	bl	8004acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f86:	1d3a      	adds	r2, r7, #4
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 feb4 	bl	8003cfc <xTaskCheckForTimeOut>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d123      	bne.n	8002fe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f9c:	f000 f916 	bl	80031cc <prvIsQueueEmpty>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d017      	beq.n	8002fd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	3324      	adds	r3, #36	@ 0x24
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fdd8 	bl	8003b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb6:	f000 f8b7 	bl	8003128 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fba:	f000 fc05 	bl	80037c8 <xTaskResumeAll>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d189      	bne.n	8002ed8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <xQueueReceive+0x1c0>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	e780      	b.n	8002ed8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd8:	f000 f8a6 	bl	8003128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fdc:	f000 fbf4 	bl	80037c8 <xTaskResumeAll>
 8002fe0:	e77a      	b.n	8002ed8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fe4:	f000 f8a0 	bl	8003128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe8:	f000 fbee 	bl	80037c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fee:	f000 f8ed 	bl	80031cc <prvIsQueueEmpty>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f43f af6f 	beq.w	8002ed8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3730      	adds	r7, #48	@ 0x30
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d14d      	bne.n	80030ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ffcc 	bl	8003fd0 <xTaskPriorityDisinherit>
 8003038:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	e043      	b.n	80030ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d119      	bne.n	800307c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6858      	ldr	r0, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	461a      	mov	r2, r3
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	f002 f89c 	bl	8005190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d32b      	bcc.n	80030ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e026      	b.n	80030ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68d8      	ldr	r0, [r3, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	461a      	mov	r2, r3
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	f002 f882 	bl	8005190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	425b      	negs	r3, r3
 8003096:	441a      	add	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d207      	bcs.n	80030b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	425b      	negs	r3, r3
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d105      	bne.n	80030ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80030d2:	697b      	ldr	r3, [r7, #20]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d303      	bcc.n	8003110 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	461a      	mov	r2, r3
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	f002 f838 	bl	8005190 <memcpy>
	}
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003130:	f001 fc9a 	bl	8004a68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800313c:	e011      	b.n	8003162 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3324      	adds	r3, #36	@ 0x24
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fd5c 	bl	8003c08 <xTaskRemoveFromEventList>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003156:	f000 fe35 	bl	8003dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	3b01      	subs	r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	dce9      	bgt.n	800313e <prvUnlockQueue+0x16>
 800316a:	e000      	b.n	800316e <prvUnlockQueue+0x46>
					break;
 800316c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	22ff      	movs	r2, #255	@ 0xff
 8003172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003176:	f001 fca9 	bl	8004acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800317a:	f001 fc75 	bl	8004a68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003184:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003186:	e011      	b.n	80031ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3310      	adds	r3, #16
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd37 	bl	8003c08 <xTaskRemoveFromEventList>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031a0:	f000 fe10 	bl	8003dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031a4:	7bbb      	ldrb	r3, [r7, #14]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	dce9      	bgt.n	8003188 <prvUnlockQueue+0x60>
 80031b4:	e000      	b.n	80031b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	22ff      	movs	r2, #255	@ 0xff
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031c0:	f001 fc84 	bl	8004acc <vPortExitCritical>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031d4:	f001 fc48 	bl	8004a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e001      	b.n	80031ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ea:	f001 fc6f 	bl	8004acc <vPortExitCritical>

	return xReturn;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003200:	f001 fc32 	bl	8004a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	429a      	cmp	r2, r3
 800320e:	d102      	bne.n	8003216 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e001      	b.n	800321a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800321a:	f001 fc57 	bl	8004acc <vPortExitCritical>

	return xReturn;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e014      	b.n	8003262 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003238:	4a0f      	ldr	r2, [pc, #60]	@ (8003278 <vQueueAddToRegistry+0x50>)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <vQueueAddToRegistry+0x50>)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800324e:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <vQueueAddToRegistry+0x50>)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800325a:	e006      	b.n	800326a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b07      	cmp	r3, #7
 8003266:	d9e7      	bls.n	8003238 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000084c 	.word	0x2000084c

0800327c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800328c:	f001 fbec 	bl	8004a68 <vPortEnterCritical>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003296:	b25b      	sxtb	r3, r3
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800329c:	d103      	bne.n	80032a6 <vQueueWaitForMessageRestricted+0x2a>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032b2:	d103      	bne.n	80032bc <vQueueWaitForMessageRestricted+0x40>
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032bc:	f001 fc06 	bl	8004acc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3324      	adds	r3, #36	@ 0x24
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fc6d 	bl	8003bb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff26 	bl	8003128 <prvUnlockQueue>
	}
 80032dc:	bf00      	nop
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	@ 0x38
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <xTaskCreateStatic+0x2c>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	623b      	str	r3, [r7, #32]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	61fb      	str	r3, [r7, #28]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800332e:	23a8      	movs	r3, #168	@ 0xa8
 8003330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2ba8      	cmp	r3, #168	@ 0xa8
 8003336:	d00b      	beq.n	8003350 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61bb      	str	r3, [r7, #24]
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003350:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01e      	beq.n	8003396 <xTaskCreateStatic+0xb2>
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01b      	beq.n	8003396 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	2202      	movs	r2, #2
 800336c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003370:	2300      	movs	r3, #0
 8003372:	9303      	str	r3, [sp, #12]
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	9302      	str	r3, [sp, #8]
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f851 	bl	8003430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800338e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003390:	f000 f8f6 	bl	8003580 <prvAddNewTaskToReadyList>
 8003394:	e001      	b.n	800339a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800339a:	697b      	ldr	r3, [r7, #20]
	}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	@ 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	@ 0x30
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fc77 	bl	8004cac <pvPortMalloc>
 80033be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033c6:	20a8      	movs	r0, #168	@ 0xa8
 80033c8:	f001 fc70 	bl	8004cac <pvPortMalloc>
 80033cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80033da:	e005      	b.n	80033e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f001 fd33 	bl	8004e48 <vPortFree>
 80033e2:	e001      	b.n	80033e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d017      	beq.n	800341e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	2300      	movs	r3, #0
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	9302      	str	r3, [sp, #8]
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f80f 	bl	8003430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003412:	69f8      	ldr	r0, [r7, #28]
 8003414:	f000 f8b4 	bl	8003580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003418:	2301      	movs	r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e002      	b.n	8003424 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003422:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003424:	69bb      	ldr	r3, [r7, #24]
	}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	461a      	mov	r2, r3
 8003448:	21a5      	movs	r1, #165	@ 0xa5
 800344a:	f001 fe1d 	bl	8005088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003458:	3b01      	subs	r3, #1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	617b      	str	r3, [r7, #20]
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	e7fd      	b.n	8003486 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01f      	beq.n	80034d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	e012      	b.n	80034bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	7819      	ldrb	r1, [r3, #0]
 800349e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	4413      	add	r3, r2
 80034a4:	3334      	adds	r3, #52	@ 0x34
 80034a6:	460a      	mov	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b0f      	cmp	r3, #15
 80034c0:	d9e9      	bls.n	8003496 <prvInitialiseNewTask+0x66>
 80034c2:	e000      	b.n	80034c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80034c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ce:	e003      	b.n	80034d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	2b37      	cmp	r3, #55	@ 0x37
 80034dc:	d901      	bls.n	80034e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034de:	2337      	movs	r3, #55	@ 0x37
 80034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	2200      	movs	r2, #0
 80034f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	3304      	adds	r3, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f965 	bl	80027c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	3318      	adds	r3, #24
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f960 	bl	80027c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003510:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003530:	3354      	adds	r3, #84	@ 0x54
 8003532:	224c      	movs	r2, #76	@ 0x4c
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fda6 	bl	8005088 <memset>
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <prvInitialiseNewTask+0x144>)
 8003540:	659a      	str	r2, [r3, #88]	@ 0x58
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	4a0c      	ldr	r2, [pc, #48]	@ (8003578 <prvInitialiseNewTask+0x148>)
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	4a0c      	ldr	r2, [pc, #48]	@ (800357c <prvInitialiseNewTask+0x14c>)
 800354c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	69b8      	ldr	r0, [r7, #24]
 8003554:	f001 f95a 	bl	800480c <pxPortInitialiseStack>
 8003558:	4602      	mov	r2, r0
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800356a:	bf00      	nop
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20001ae0 	.word	0x20001ae0
 8003578:	20001b48 	.word	0x20001b48
 800357c:	20001bb0 	.word	0x20001bb0

08003580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003588:	f001 fa6e 	bl	8004a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800358c:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 8003594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003596:	4b2c      	ldr	r3, [pc, #176]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800359e:	4a2a      	ldr	r2, [pc, #168]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <prvAddNewTaskToReadyList+0xc4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d110      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035ac:	f000 fc2e 	bl	8003e0c <prvInitialiseTaskLists>
 80035b0:	e00d      	b.n	80035ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035b2:	4b26      	ldr	r3, [pc, #152]	@ (800364c <prvAddNewTaskToReadyList+0xcc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035ba:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d802      	bhi.n	80035ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <prvAddNewTaskToReadyList+0xd0>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <prvAddNewTaskToReadyList+0xd4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d903      	bls.n	80035f4 <prvAddNewTaskToReadyList+0x74>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <prvAddNewTaskToReadyList+0xd4>)
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <prvAddNewTaskToReadyList+0xd8>)
 8003602:	441a      	add	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f7ff f8e9 	bl	80027e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003610:	f001 fa5c 	bl	8004acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003614:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <prvAddNewTaskToReadyList+0xcc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800361c:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <prvAddNewTaskToReadyList+0xc8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	429a      	cmp	r2, r3
 8003628:	d207      	bcs.n	800363a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800362a:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <prvAddNewTaskToReadyList+0xdc>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000d60 	.word	0x20000d60
 8003648:	2000088c 	.word	0x2000088c
 800364c:	20000d6c 	.word	0x20000d6c
 8003650:	20000d7c 	.word	0x20000d7c
 8003654:	20000d68 	.word	0x20000d68
 8003658:	20000890 	.word	0x20000890
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003672:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <vTaskDelay+0x64>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <vTaskDelay+0x32>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	60bb      	str	r3, [r7, #8]
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003692:	f000 f88b 	bl	80037ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003696:	2100      	movs	r1, #0
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fd09 	bl	80040b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800369e:	f000 f893 	bl	80037c8 <xTaskResumeAll>
 80036a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036aa:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <vTaskDelay+0x68>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000d88 	.word	0x20000d88
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036da:	463a      	mov	r2, r7
 80036dc:	1d39      	adds	r1, r7, #4
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f81c 	bl	8002720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	9202      	str	r2, [sp, #8]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	460a      	mov	r2, r1
 80036fa:	4924      	ldr	r1, [pc, #144]	@ (800378c <vTaskStartScheduler+0xc0>)
 80036fc:	4824      	ldr	r0, [pc, #144]	@ (8003790 <vTaskStartScheduler+0xc4>)
 80036fe:	f7ff fdf1 	bl	80032e4 <xTaskCreateStatic>
 8003702:	4603      	mov	r3, r0
 8003704:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <vTaskStartScheduler+0xc8>)
 8003706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003708:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <vTaskStartScheduler+0xc8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e001      	b.n	800371a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003720:	f000 fd1a 	bl	8004158 <xTimerCreateTimerTask>
 8003724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d11b      	bne.n	8003764 <vTaskStartScheduler+0x98>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	613b      	str	r3, [r7, #16]
}
 800373e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003740:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <vTaskStartScheduler+0xcc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3354      	adds	r3, #84	@ 0x54
 8003746:	4a15      	ldr	r2, [pc, #84]	@ (800379c <vTaskStartScheduler+0xd0>)
 8003748:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <vTaskStartScheduler+0xd4>)
 800374c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <vTaskStartScheduler+0xd8>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003758:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <vTaskStartScheduler+0xdc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800375e:	f001 f8df 	bl	8004920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003762:	e00f      	b.n	8003784 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800376a:	d10b      	bne.n	8003784 <vTaskStartScheduler+0xb8>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60fb      	str	r3, [r7, #12]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <vTaskStartScheduler+0xb4>
}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0800527c 	.word	0x0800527c
 8003790:	08003ddd 	.word	0x08003ddd
 8003794:	20000d84 	.word	0x20000d84
 8003798:	2000088c 	.word	0x2000088c
 800379c:	20000010 	.word	0x20000010
 80037a0:	20000d80 	.word	0x20000d80
 80037a4:	20000d6c 	.word	0x20000d6c
 80037a8:	20000d64 	.word	0x20000d64

080037ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <vTaskSuspendAll+0x18>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	4a03      	ldr	r2, [pc, #12]	@ (80037c4 <vTaskSuspendAll+0x18>)
 80037b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000d88 	.word	0x20000d88

080037c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037d6:	4b42      	ldr	r3, [pc, #264]	@ (80038e0 <xTaskResumeAll+0x118>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	603b      	str	r3, [r7, #0]
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	e7fd      	b.n	80037f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037f6:	f001 f937 	bl	8004a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037fa:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <xTaskResumeAll+0x118>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3b01      	subs	r3, #1
 8003800:	4a37      	ldr	r2, [pc, #220]	@ (80038e0 <xTaskResumeAll+0x118>)
 8003802:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <xTaskResumeAll+0x118>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d162      	bne.n	80038d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800380c:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <xTaskResumeAll+0x11c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05e      	beq.n	80038d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003814:	e02f      	b.n	8003876 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003816:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <xTaskResumeAll+0x120>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3318      	adds	r3, #24
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f83a 	bl	800289c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f835 	bl	800289c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003836:	4b2d      	ldr	r3, [pc, #180]	@ (80038ec <xTaskResumeAll+0x124>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d903      	bls.n	8003846 <xTaskResumeAll+0x7e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <xTaskResumeAll+0x124>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a27      	ldr	r2, [pc, #156]	@ (80038f0 <xTaskResumeAll+0x128>)
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe ffc0 	bl	80027e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003866:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <xTaskResumeAll+0x12c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003870:	4b21      	ldr	r3, [pc, #132]	@ (80038f8 <xTaskResumeAll+0x130>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003876:	4b1c      	ldr	r3, [pc, #112]	@ (80038e8 <xTaskResumeAll+0x120>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1cb      	bne.n	8003816 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003884:	f000 fb66 	bl	8003f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003888:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <xTaskResumeAll+0x134>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003894:	f000 f846 	bl	8003924 <xTaskIncrementTick>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <xTaskResumeAll+0x130>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f1      	bne.n	8003894 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80038b0:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <xTaskResumeAll+0x134>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038b6:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <xTaskResumeAll+0x130>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <xTaskResumeAll+0x138>)
 80038c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d2:	f001 f8fb 	bl	8004acc <vPortExitCritical>

	return xAlreadyYielded;
 80038d6:	68bb      	ldr	r3, [r7, #8]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000d88 	.word	0x20000d88
 80038e4:	20000d60 	.word	0x20000d60
 80038e8:	20000d20 	.word	0x20000d20
 80038ec:	20000d68 	.word	0x20000d68
 80038f0:	20000890 	.word	0x20000890
 80038f4:	2000088c 	.word	0x2000088c
 80038f8:	20000d74 	.word	0x20000d74
 80038fc:	20000d70 	.word	0x20000d70
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <xTaskGetTickCount+0x1c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000d64 	.word	0x20000d64

08003924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a6c <xTaskIncrementTick+0x148>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8090 	bne.w	8003a58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003938:	4b4d      	ldr	r3, [pc, #308]	@ (8003a70 <xTaskIncrementTick+0x14c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <xTaskIncrementTick+0x14c>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d121      	bne.n	8003990 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800394c:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <xTaskIncrementTick+0x150>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	603b      	str	r3, [r7, #0]
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <xTaskIncrementTick+0x46>
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <xTaskIncrementTick+0x150>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4b40      	ldr	r3, [pc, #256]	@ (8003a78 <xTaskIncrementTick+0x154>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3e      	ldr	r2, [pc, #248]	@ (8003a74 <xTaskIncrementTick+0x150>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a78 <xTaskIncrementTick+0x154>)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <xTaskIncrementTick+0x158>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	4a3c      	ldr	r2, [pc, #240]	@ (8003a7c <xTaskIncrementTick+0x158>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	f000 fae2 	bl	8003f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003990:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <xTaskIncrementTick+0x15c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d349      	bcc.n	8003a2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800399a:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <xTaskIncrementTick+0x150>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <xTaskIncrementTick+0x15c>)
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039aa:	601a      	str	r2, [r3, #0]
					break;
 80039ac:	e03f      	b.n	8003a2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ae:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <xTaskIncrementTick+0x150>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d203      	bcs.n	80039ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003a80 <xTaskIncrementTick+0x15c>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039cc:	e02f      	b.n	8003a2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe ff62 	bl	800289c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3318      	adds	r3, #24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe ff59 	bl	800289c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ee:	4b25      	ldr	r3, [pc, #148]	@ (8003a84 <xTaskIncrementTick+0x160>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d903      	bls.n	80039fe <xTaskIncrementTick+0xda>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <xTaskIncrementTick+0x160>)
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a88 <xTaskIncrementTick+0x164>)
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe fee4 	bl	80027e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <xTaskIncrementTick+0x168>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3b8      	bcc.n	800399a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a2c:	e7b5      	b.n	800399a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a2e:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <xTaskIncrementTick+0x168>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4914      	ldr	r1, [pc, #80]	@ (8003a88 <xTaskIncrementTick+0x164>)
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d901      	bls.n	8003a4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a4a:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <xTaskIncrementTick+0x16c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e004      	b.n	8003a62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <xTaskIncrementTick+0x170>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <xTaskIncrementTick+0x170>)
 8003a60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a62:	697b      	ldr	r3, [r7, #20]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000d88 	.word	0x20000d88
 8003a70:	20000d64 	.word	0x20000d64
 8003a74:	20000d18 	.word	0x20000d18
 8003a78:	20000d1c 	.word	0x20000d1c
 8003a7c:	20000d78 	.word	0x20000d78
 8003a80:	20000d80 	.word	0x20000d80
 8003a84:	20000d68 	.word	0x20000d68
 8003a88:	20000890 	.word	0x20000890
 8003a8c:	2000088c 	.word	0x2000088c
 8003a90:	20000d74 	.word	0x20000d74
 8003a94:	20000d70 	.word	0x20000d70

08003a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <vTaskSwitchContext+0xb4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <vTaskSwitchContext+0xb8>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003aac:	e047      	b.n	8003b3e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003aae:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <vTaskSwitchContext+0xb8>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab4:	4b27      	ldr	r3, [pc, #156]	@ (8003b54 <vTaskSwitchContext+0xbc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e011      	b.n	8003ae0 <vTaskSwitchContext+0x48>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <vTaskSwitchContext+0x42>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	607b      	str	r3, [r7, #4]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <vTaskSwitchContext+0x3e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	491d      	ldr	r1, [pc, #116]	@ (8003b58 <vTaskSwitchContext+0xc0>)
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0e3      	beq.n	8003abc <vTaskSwitchContext+0x24>
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <vTaskSwitchContext+0xc0>)
 8003b00:	4413      	add	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3308      	adds	r3, #8
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d104      	bne.n	8003b24 <vTaskSwitchContext+0x8c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b5c <vTaskSwitchContext+0xc4>)
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <vTaskSwitchContext+0xbc>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <vTaskSwitchContext+0xc4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3354      	adds	r3, #84	@ 0x54
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <vTaskSwitchContext+0xc8>)
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000d88 	.word	0x20000d88
 8003b50:	20000d74 	.word	0x20000d74
 8003b54:	20000d68 	.word	0x20000d68
 8003b58:	20000890 	.word	0x20000890
 8003b5c:	2000088c 	.word	0x2000088c
 8003b60:	20000010 	.word	0x20000010

08003b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	60fb      	str	r3, [r7, #12]
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b8c:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <vTaskPlaceOnEventList+0x48>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3318      	adds	r3, #24
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fe fe48 	bl	800282a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	6838      	ldr	r0, [r7, #0]
 8003b9e:	f000 fa87 	bl	80040b0 <prvAddCurrentTaskToDelayedList>
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000088c 	.word	0x2000088c

08003bb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	617b      	str	r3, [r7, #20]
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <vTaskPlaceOnEventListRestricted+0x54>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7fe fdfd 	bl	80027e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bf2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68b8      	ldr	r0, [r7, #8]
 8003bf8:	f000 fa5a 	bl	80040b0 <prvAddCurrentTaskToDelayedList>
	}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000088c 	.word	0x2000088c

08003c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60fb      	str	r3, [r7, #12]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3318      	adds	r3, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fe2e 	bl	800289c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c40:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <xTaskRemoveFromEventList+0xb0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d11d      	bne.n	8003c84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fe25 	bl	800289c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c56:	4b19      	ldr	r3, [pc, #100]	@ (8003cbc <xTaskRemoveFromEventList+0xb4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d903      	bls.n	8003c66 <xTaskRemoveFromEventList+0x5e>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <xTaskRemoveFromEventList+0xb4>)
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4a13      	ldr	r2, [pc, #76]	@ (8003cc0 <xTaskRemoveFromEventList+0xb8>)
 8003c74:	441a      	add	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f7fe fdb0 	bl	80027e2 <vListInsertEnd>
 8003c82:	e005      	b.n	8003c90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3318      	adds	r3, #24
 8003c88:	4619      	mov	r1, r3
 8003c8a:	480e      	ldr	r0, [pc, #56]	@ (8003cc4 <xTaskRemoveFromEventList+0xbc>)
 8003c8c:	f7fe fda9 	bl	80027e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <xTaskRemoveFromEventList+0xc0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d905      	bls.n	8003caa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <xTaskRemoveFromEventList+0xc4>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e001      	b.n	8003cae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000d88 	.word	0x20000d88
 8003cbc:	20000d68 	.word	0x20000d68
 8003cc0:	20000890 	.word	0x20000890
 8003cc4:	20000d20 	.word	0x20000d20
 8003cc8:	2000088c 	.word	0x2000088c
 8003ccc:	20000d74 	.word	0x20000d74

08003cd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <vTaskInternalSetTimeOutState+0x24>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <vTaskInternalSetTimeOutState+0x28>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000d78 	.word	0x20000d78
 8003cf8:	20000d64 	.word	0x20000d64

08003cfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	613b      	str	r3, [r7, #16]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60fb      	str	r3, [r7, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d42:	f000 fe91 	bl	8004a68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <xTaskCheckForTimeOut+0xc0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d5e:	d102      	bne.n	8003d66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e023      	b.n	8003dae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <xTaskCheckForTimeOut+0xc4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d007      	beq.n	8003d82 <xTaskCheckForTimeOut+0x86>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	e015      	b.n	8003dae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d20b      	bcs.n	8003da4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff99 	bl	8003cd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e004      	b.n	8003dae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dae:	f000 fe8d 	bl	8004acc <vPortExitCritical>

	return xReturn;
 8003db2:	69fb      	ldr	r3, [r7, #28]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000d64 	.word	0x20000d64
 8003dc0:	20000d78 	.word	0x20000d78

08003dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <vTaskMissedYield+0x14>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	20000d74 	.word	0x20000d74

08003ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003de4:	f000 f852 	bl	8003e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <prvIdleTask+0x28>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d9f9      	bls.n	8003de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <prvIdleTask+0x2c>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e00:	e7f0      	b.n	8003de4 <prvIdleTask+0x8>
 8003e02:	bf00      	nop
 8003e04:	20000890 	.word	0x20000890
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e12:	2300      	movs	r3, #0
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	e00c      	b.n	8003e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <prvInitialiseTaskLists+0x60>)
 8003e24:	4413      	add	r3, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fcae 	bl	8002788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b37      	cmp	r3, #55	@ 0x37
 8003e36:	d9ef      	bls.n	8003e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e38:	480d      	ldr	r0, [pc, #52]	@ (8003e70 <prvInitialiseTaskLists+0x64>)
 8003e3a:	f7fe fca5 	bl	8002788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e3e:	480d      	ldr	r0, [pc, #52]	@ (8003e74 <prvInitialiseTaskLists+0x68>)
 8003e40:	f7fe fca2 	bl	8002788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e44:	480c      	ldr	r0, [pc, #48]	@ (8003e78 <prvInitialiseTaskLists+0x6c>)
 8003e46:	f7fe fc9f 	bl	8002788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e4a:	480c      	ldr	r0, [pc, #48]	@ (8003e7c <prvInitialiseTaskLists+0x70>)
 8003e4c:	f7fe fc9c 	bl	8002788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e50:	480b      	ldr	r0, [pc, #44]	@ (8003e80 <prvInitialiseTaskLists+0x74>)
 8003e52:	f7fe fc99 	bl	8002788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <prvInitialiseTaskLists+0x78>)
 8003e58:	4a05      	ldr	r2, [pc, #20]	@ (8003e70 <prvInitialiseTaskLists+0x64>)
 8003e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <prvInitialiseTaskLists+0x7c>)
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <prvInitialiseTaskLists+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000890 	.word	0x20000890
 8003e70:	20000cf0 	.word	0x20000cf0
 8003e74:	20000d04 	.word	0x20000d04
 8003e78:	20000d20 	.word	0x20000d20
 8003e7c:	20000d34 	.word	0x20000d34
 8003e80:	20000d4c 	.word	0x20000d4c
 8003e84:	20000d18 	.word	0x20000d18
 8003e88:	20000d1c 	.word	0x20000d1c

08003e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e92:	e019      	b.n	8003ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e94:	f000 fde8 	bl	8004a68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <prvCheckTasksWaitingTermination+0x50>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fcf9 	bl	800289c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <prvCheckTasksWaitingTermination+0x54>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee0 <prvCheckTasksWaitingTermination+0x54>)
 8003eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <prvCheckTasksWaitingTermination+0x58>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee4 <prvCheckTasksWaitingTermination+0x58>)
 8003ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ebe:	f000 fe05 	bl	8004acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f810 	bl	8003ee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <prvCheckTasksWaitingTermination+0x58>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e1      	bne.n	8003e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000d34 	.word	0x20000d34
 8003ee0:	20000d60 	.word	0x20000d60
 8003ee4:	20000d48 	.word	0x20000d48

08003ee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3354      	adds	r3, #84	@ 0x54
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f8cf 	bl	8005098 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 ff9d 	bl	8004e48 <vPortFree>
				vPortFree( pxTCB );
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ff9a 	bl	8004e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f14:	e019      	b.n	8003f4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d103      	bne.n	8003f28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 ff91 	bl	8004e48 <vPortFree>
	}
 8003f26:	e010      	b.n	8003f4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d00b      	beq.n	8003f4a <prvDeleteTCB+0x62>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60fb      	str	r3, [r7, #12]
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <prvDeleteTCB+0x5e>
	}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <prvResetNextTaskUnblockTime+0x38>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	@ (8003f90 <prvResetNextTaskUnblockTime+0x3c>)
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f6c:	e008      	b.n	8003f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6e:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <prvResetNextTaskUnblockTime+0x38>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <prvResetNextTaskUnblockTime+0x3c>)
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	20000d18 	.word	0x20000d18
 8003f90:	20000d80 	.word	0x20000d80

08003f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <xTaskGetSchedulerState+0x34>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	e008      	b.n	8003fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa8:	4b08      	ldr	r3, [pc, #32]	@ (8003fcc <xTaskGetSchedulerState+0x38>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	e001      	b.n	8003fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fba:	687b      	ldr	r3, [r7, #4]
	}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000d6c 	.word	0x20000d6c
 8003fcc:	20000d88 	.word	0x20000d88

08003fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d058      	beq.n	8004098 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80040a4 <xTaskPriorityDisinherit+0xd4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d00b      	beq.n	8004008 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	60fb      	str	r3, [r7, #12]
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60bb      	str	r3, [r7, #8]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	429a      	cmp	r2, r3
 800403c:	d02c      	beq.n	8004098 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d128      	bne.n	8004098 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fc26 	bl	800289c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <xTaskPriorityDisinherit+0xd8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d903      	bls.n	8004078 <xTaskPriorityDisinherit+0xa8>
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <xTaskPriorityDisinherit+0xd8>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <xTaskPriorityDisinherit+0xdc>)
 8004086:	441a      	add	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f7fe fba7 	bl	80027e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004098:	697b      	ldr	r3, [r7, #20]
	}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2000088c 	.word	0x2000088c
 80040a8:	20000d68 	.word	0x20000d68
 80040ac:	20000890 	.word	0x20000890

080040b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040ba:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <prvAddCurrentTaskToDelayedList+0x90>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c0:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <prvAddCurrentTaskToDelayedList+0x94>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fbe8 	bl	800289c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040d2:	d10a      	bne.n	80040ea <prvAddCurrentTaskToDelayedList+0x3a>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <prvAddCurrentTaskToDelayedList+0x94>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4819      	ldr	r0, [pc, #100]	@ (8004148 <prvAddCurrentTaskToDelayedList+0x98>)
 80040e4:	f7fe fb7d 	bl	80027e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040e8:	e026      	b.n	8004138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040f2:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <prvAddCurrentTaskToDelayedList+0x94>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d209      	bcs.n	8004116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <prvAddCurrentTaskToDelayedList+0x94>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7fe fb8b 	bl	800282a <vListInsert>
}
 8004114:	e010      	b.n	8004138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <prvAddCurrentTaskToDelayedList+0x94>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7fe fb81 	bl	800282a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	d202      	bcs.n	8004138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004132:	4a08      	ldr	r2, [pc, #32]	@ (8004154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000d64 	.word	0x20000d64
 8004144:	2000088c 	.word	0x2000088c
 8004148:	20000d4c 	.word	0x20000d4c
 800414c:	20000d1c 	.word	0x20000d1c
 8004150:	20000d18 	.word	0x20000d18
 8004154:	20000d80 	.word	0x20000d80

08004158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004162:	f000 fb13 	bl	800478c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004166:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <xTimerCreateTimerTask+0x84>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d021      	beq.n	80041b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004176:	1d3a      	adds	r2, r7, #4
 8004178:	f107 0108 	add.w	r1, r7, #8
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fae7 	bl	8002754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	9202      	str	r2, [sp, #8]
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	2302      	movs	r3, #2
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	460a      	mov	r2, r1
 8004198:	4911      	ldr	r1, [pc, #68]	@ (80041e0 <xTimerCreateTimerTask+0x88>)
 800419a:	4812      	ldr	r0, [pc, #72]	@ (80041e4 <xTimerCreateTimerTask+0x8c>)
 800419c:	f7ff f8a2 	bl	80032e4 <xTaskCreateStatic>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <xTimerCreateTimerTask+0x90>)
 80041a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <xTimerCreateTimerTask+0x90>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041ae:	2301      	movs	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	613b      	str	r3, [r7, #16]
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000dbc 	.word	0x20000dbc
 80041e0:	08005284 	.word	0x08005284
 80041e4:	08004325 	.word	0x08004325
 80041e8:	20000dc0 	.word	0x20000dc0

080041ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <xTimerGenericCommand+0x30>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	623b      	str	r3, [r7, #32]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800421c:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <xTimerGenericCommand+0x98>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02a      	beq.n	800427a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b05      	cmp	r3, #5
 8004234:	dc18      	bgt.n	8004268 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004236:	f7ff fead 	bl	8003f94 <xTaskGetSchedulerState>
 800423a:	4603      	mov	r3, r0
 800423c:	2b02      	cmp	r3, #2
 800423e:	d109      	bne.n	8004254 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <xTimerGenericCommand+0x98>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	f107 0110 	add.w	r1, r7, #16
 8004248:	2300      	movs	r3, #0
 800424a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424c:	f7fe fc5a 	bl	8002b04 <xQueueGenericSend>
 8004250:	6278      	str	r0, [r7, #36]	@ 0x24
 8004252:	e012      	b.n	800427a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <xTimerGenericCommand+0x98>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	f107 0110 	add.w	r1, r7, #16
 800425c:	2300      	movs	r3, #0
 800425e:	2200      	movs	r2, #0
 8004260:	f7fe fc50 	bl	8002b04 <xQueueGenericSend>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24
 8004266:	e008      	b.n	800427a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <xTimerGenericCommand+0x98>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	f107 0110 	add.w	r1, r7, #16
 8004270:	2300      	movs	r3, #0
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	f7fe fd48 	bl	8002d08 <xQueueGenericSendFromISR>
 8004278:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	@ 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000dbc 	.word	0x20000dbc

08004288 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004292:	4b23      	ldr	r3, [pc, #140]	@ (8004320 <prvProcessExpiredTimer+0x98>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3304      	adds	r3, #4
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fafb 	bl	800289c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	18d1      	adds	r1, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	f000 f8d5 	bl	8004470 <prvInsertTimerInActiveList>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042cc:	2300      	movs	r3, #0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	2100      	movs	r1, #0
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff ff88 	bl	80041ec <xTimerGenericCommand>
 80042dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d114      	bne.n	800430e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	4798      	blx	r3
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000db4 	.word	0x20000db4

08004324 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f859 	bl	80043e8 <prvGetNextExpireTime>
 8004336:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4619      	mov	r1, r3
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f805 	bl	800434c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004342:	f000 f8d7 	bl	80044f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004346:	bf00      	nop
 8004348:	e7f0      	b.n	800432c <prvTimerTask+0x8>
	...

0800434c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004356:	f7ff fa29 	bl	80037ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f866 	bl	8004430 <prvSampleTimeNow>
 8004364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d130      	bne.n	80043ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <prvProcessTimerOrBlockTask+0x3c>
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d806      	bhi.n	8004388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800437a:	f7ff fa25 	bl	80037c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff81 	bl	8004288 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004386:	e024      	b.n	80043d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800438e:	4b13      	ldr	r3, [pc, #76]	@ (80043dc <prvProcessTimerOrBlockTask+0x90>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <prvProcessTimerOrBlockTask+0x50>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <prvProcessTimerOrBlockTask+0x52>
 800439c:	2300      	movs	r3, #0
 800439e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043a0:	4b0f      	ldr	r3, [pc, #60]	@ (80043e0 <prvProcessTimerOrBlockTask+0x94>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7fe ff65 	bl	800327c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043b2:	f7ff fa09 	bl	80037c8 <xTaskResumeAll>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043bc:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <prvProcessTimerOrBlockTask+0x98>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
}
 80043cc:	e001      	b.n	80043d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043ce:	f7ff f9fb 	bl	80037c8 <xTaskResumeAll>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000db8 	.word	0x20000db8
 80043e0:	20000dbc 	.word	0x20000dbc
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <prvGetNextExpireTime+0x44>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <prvGetNextExpireTime+0x16>
 80043fa:	2201      	movs	r2, #1
 80043fc:	e000      	b.n	8004400 <prvGetNextExpireTime+0x18>
 80043fe:	2200      	movs	r2, #0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800440c:	4b07      	ldr	r3, [pc, #28]	@ (800442c <prvGetNextExpireTime+0x44>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e001      	b.n	800441c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800441c:	68fb      	ldr	r3, [r7, #12]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000db4 	.word	0x20000db4

08004430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004438:	f7ff fa64 	bl	8003904 <xTaskGetTickCount>
 800443c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <prvSampleTimeNow+0x3c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d205      	bcs.n	8004454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004448:	f000 f93a 	bl	80046c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e002      	b.n	800445a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800445a:	4a04      	ldr	r2, [pc, #16]	@ (800446c <prvSampleTimeNow+0x3c>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000dc4 	.word	0x20000dc4

08004470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d812      	bhi.n	80044bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	1ad2      	subs	r2, r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e01b      	b.n	80044e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <prvInsertTimerInActiveList+0x7c>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7fe f9b8 	bl	800282a <vListInsert>
 80044ba:	e012      	b.n	80044e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d206      	bcs.n	80044d2 <prvInsertTimerInActiveList+0x62>
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e007      	b.n	80044e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <prvInsertTimerInActiveList+0x80>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7fe f9a4 	bl	800282a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044e2:	697b      	ldr	r3, [r7, #20]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000db8 	.word	0x20000db8
 80044f0:	20000db4 	.word	0x20000db4

080044f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	@ 0x38
 80044f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044fa:	e0ce      	b.n	800469a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da19      	bge.n	8004536 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	3304      	adds	r3, #4
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	61fb      	str	r3, [r7, #28]
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800452c:	6850      	ldr	r0, [r2, #4]
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	4611      	mov	r1, r2
 8004534:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f2c0 80ae 	blt.w	800469a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f9a4 	bl	800289c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004554:	463b      	mov	r3, r7
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff6a 	bl	8004430 <prvSampleTimeNow>
 800455c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b09      	cmp	r3, #9
 8004562:	f200 8097 	bhi.w	8004694 <prvProcessReceivedCommands+0x1a0>
 8004566:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <prvProcessReceivedCommands+0x78>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	08004595 	.word	0x08004595
 8004570:	08004595 	.word	0x08004595
 8004574:	08004595 	.word	0x08004595
 8004578:	0800460b 	.word	0x0800460b
 800457c:	0800461f 	.word	0x0800461f
 8004580:	0800466b 	.word	0x0800466b
 8004584:	08004595 	.word	0x08004595
 8004588:	08004595 	.word	0x08004595
 800458c:	0800460b 	.word	0x0800460b
 8004590:	0800461f 	.word	0x0800461f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	18d1      	adds	r1, r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045b4:	f7ff ff5c 	bl	8004470 <prvInsertTimerInActiveList>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d06c      	beq.n	8004698 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d061      	beq.n	8004698 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	441a      	add	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	2100      	movs	r1, #0
 80045e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e6:	f7ff fe01 	bl	80041ec <xTimerGenericCommand>
 80045ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d152      	bne.n	8004698 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	61bb      	str	r3, [r7, #24]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	b2da      	uxtb	r2, r3
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800461c:	e03d      	b.n	800469a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	617b      	str	r3, [r7, #20]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	18d1      	adds	r1, r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004664:	f7ff ff04 	bl	8004470 <prvInsertTimerInActiveList>
					break;
 8004668:	e017      	b.n	800469a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800467a:	f000 fbe5 	bl	8004e48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800467e:	e00c      	b.n	800469a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	b2da      	uxtb	r2, r3
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004692:	e002      	b.n	800469a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <prvProcessReceivedCommands+0x1a6>
					break;
 8004698:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800469a:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <prvProcessReceivedCommands+0x1c8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	1d39      	adds	r1, r7, #4
 80046a0:	2200      	movs	r2, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fbce 	bl	8002e44 <xQueueReceive>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f47f af26 	bne.w	80044fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3730      	adds	r7, #48	@ 0x30
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000dbc 	.word	0x20000dbc

080046c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046c6:	e049      	b.n	800475c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe f8db 	bl	800289c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02f      	beq.n	800475c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90e      	bls.n	800472c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fe f880 	bl	800282a <vListInsert>
 800472a:	e017      	b.n	800475c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800472c:	2300      	movs	r3, #0
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2300      	movs	r3, #0
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	2100      	movs	r1, #0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fd58 	bl	80041ec <xTimerGenericCommand>
 800473c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	603b      	str	r3, [r7, #0]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1b0      	bne.n	80046c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <prvSwitchTimerLists+0xc8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <prvSwitchTimerLists+0xc4>)
 8004772:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004774:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <prvSwitchTimerLists+0xc8>)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6013      	str	r3, [r2, #0]
}
 800477a:	bf00      	nop
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000db4 	.word	0x20000db4
 8004788:	20000db8 	.word	0x20000db8

0800478c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004792:	f000 f969 	bl	8004a68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <prvCheckForValidListAndQueue+0x60>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d120      	bne.n	80047e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800479e:	4814      	ldr	r0, [pc, #80]	@ (80047f0 <prvCheckForValidListAndQueue+0x64>)
 80047a0:	f7fd fff2 	bl	8002788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047a4:	4813      	ldr	r0, [pc, #76]	@ (80047f4 <prvCheckForValidListAndQueue+0x68>)
 80047a6:	f7fd ffef 	bl	8002788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <prvCheckForValidListAndQueue+0x6c>)
 80047ac:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <prvCheckForValidListAndQueue+0x64>)
 80047ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047b0:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <prvCheckForValidListAndQueue+0x70>)
 80047b2:	4a10      	ldr	r2, [pc, #64]	@ (80047f4 <prvCheckForValidListAndQueue+0x68>)
 80047b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047b6:	2300      	movs	r3, #0
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <prvCheckForValidListAndQueue+0x74>)
 80047bc:	4a11      	ldr	r2, [pc, #68]	@ (8004804 <prvCheckForValidListAndQueue+0x78>)
 80047be:	2110      	movs	r1, #16
 80047c0:	200a      	movs	r0, #10
 80047c2:	f7fe f8ff 	bl	80029c4 <xQueueGenericCreateStatic>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <prvCheckForValidListAndQueue+0x60>)
 80047ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047cc:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <prvCheckForValidListAndQueue+0x60>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <prvCheckForValidListAndQueue+0x60>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	490b      	ldr	r1, [pc, #44]	@ (8004808 <prvCheckForValidListAndQueue+0x7c>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fd24 	bl	8003228 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e0:	f000 f974 	bl	8004acc <vPortExitCritical>
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000dbc 	.word	0x20000dbc
 80047f0:	20000d8c 	.word	0x20000d8c
 80047f4:	20000da0 	.word	0x20000da0
 80047f8:	20000db4 	.word	0x20000db4
 80047fc:	20000db8 	.word	0x20000db8
 8004800:	20000e68 	.word	0x20000e68
 8004804:	20000dc8 	.word	0x20000dc8
 8004808:	0800528c 	.word	0x0800528c

0800480c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b04      	subs	r3, #4
 800481c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b04      	subs	r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b04      	subs	r3, #4
 800483a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800483c:	4a0c      	ldr	r2, [pc, #48]	@ (8004870 <pxPortInitialiseStack+0x64>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b14      	subs	r3, #20
 8004846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b04      	subs	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f06f 0202 	mvn.w	r2, #2
 800485a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3b20      	subs	r3, #32
 8004860:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	08004875 	.word	0x08004875

08004874 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800487e:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <prvTaskExitError+0x58>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004886:	d00b      	beq.n	80048a0 <prvTaskExitError+0x2c>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <prvTaskExitError+0x28>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60bb      	str	r3, [r7, #8]
}
 80048b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048b4:	bf00      	nop
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0fc      	beq.n	80048b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	4770      	bx	lr
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst2>:
 80048f0:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048f8:	4808      	ldr	r0, [pc, #32]	@ (800491c <prvPortStartFirstTask+0x24>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f380 8808 	msr	MSP, r0
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8814 	msr	CONTROL, r0
 800490a:	b662      	cpsie	i
 800490c:	b661      	cpsie	f
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	df00      	svc	0
 8004918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800491a:	bf00      	nop
 800491c:	e000ed08 	.word	0xe000ed08

08004920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004926:	4b47      	ldr	r3, [pc, #284]	@ (8004a44 <xPortStartScheduler+0x124>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a47      	ldr	r2, [pc, #284]	@ (8004a48 <xPortStartScheduler+0x128>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10b      	bne.n	8004948 <xPortStartScheduler+0x28>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	613b      	str	r3, [r7, #16]
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004948:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <xPortStartScheduler+0x124>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a4c <xPortStartScheduler+0x12c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10b      	bne.n	800496a <xPortStartScheduler+0x4a>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800496a:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <xPortStartScheduler+0x130>)
 800496c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	22ff      	movs	r2, #255	@ 0xff
 800497a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <xPortStartScheduler+0x134>)
 8004990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <xPortStartScheduler+0x138>)
 8004994:	2207      	movs	r2, #7
 8004996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004998:	e009      	b.n	80049ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800499a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <xPortStartScheduler+0x138>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b6:	2b80      	cmp	r3, #128	@ 0x80
 80049b8:	d0ef      	beq.n	800499a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049ba:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1c3 0307 	rsb	r3, r3, #7
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d00b      	beq.n	80049de <xPortStartScheduler+0xbe>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	60bb      	str	r3, [r7, #8]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049de:	4b1e      	ldr	r3, [pc, #120]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049f0:	4a19      	ldr	r2, [pc, #100]	@ (8004a58 <xPortStartScheduler+0x138>)
 80049f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049fc:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <xPortStartScheduler+0x13c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <xPortStartScheduler+0x13c>)
 8004a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a08:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <xPortStartScheduler+0x13c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a13      	ldr	r2, [pc, #76]	@ (8004a5c <xPortStartScheduler+0x13c>)
 8004a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a14:	f000 f8da 	bl	8004bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a18:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <xPortStartScheduler+0x140>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a1e:	f000 f8f9 	bl	8004c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a22:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <xPortStartScheduler+0x144>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <xPortStartScheduler+0x144>)
 8004a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a2e:	f7ff ff63 	bl	80048f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a32:	f7ff f831 	bl	8003a98 <vTaskSwitchContext>
	prvTaskExitError();
 8004a36:	f7ff ff1d 	bl	8004874 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	e000ed00 	.word	0xe000ed00
 8004a48:	410fc271 	.word	0x410fc271
 8004a4c:	410fc270 	.word	0x410fc270
 8004a50:	e000e400 	.word	0xe000e400
 8004a54:	20000eb8 	.word	0x20000eb8
 8004a58:	20000ebc 	.word	0x20000ebc
 8004a5c:	e000ed20 	.word	0xe000ed20
 8004a60:	2000000c 	.word	0x2000000c
 8004a64:	e000ef34 	.word	0xe000ef34

08004a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
}
 8004a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a82:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <vPortEnterCritical+0x5c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <vPortEnterCritical+0x5c>)
 8004a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <vPortEnterCritical+0x5c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d110      	bne.n	8004ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <vPortEnterCritical+0x60>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	603b      	str	r3, [r7, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <vPortEnterCritical+0x4a>
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ad2:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <vPortExitCritical+0x50>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <vPortExitCritical+0x26>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	607b      	str	r3, [r7, #4]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <vPortExitCritical+0x50>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	4a08      	ldr	r2, [pc, #32]	@ (8004b1c <vPortExitCritical+0x50>)
 8004afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004afc:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <vPortExitCritical+0x50>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <vPortExitCritical+0x44>
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f383 8811 	msr	BASEPRI, r3
}
 8004b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c

08004b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b20:	f3ef 8009 	mrs	r0, PSP
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <pxCurrentTCBConst>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f01e 0f10 	tst.w	lr, #16
 8004b30:	bf08      	it	eq
 8004b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b44:	f380 8811 	msr	BASEPRI, r0
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f7fe ffa2 	bl	8003a98 <vTaskSwitchContext>
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f380 8811 	msr	BASEPRI, r0
 8004b5c:	bc09      	pop	{r0, r3}
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b66:	f01e 0f10 	tst.w	lr, #16
 8004b6a:	bf08      	it	eq
 8004b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b70:	f380 8809 	msr	PSP, r0
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst>:
 8004b80:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
}
 8004ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ba2:	f7fe febf 	bl	8003924 <xTaskIncrementTick>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <xPortSysTickHandler+0x40>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <vPortSetupTimerInterrupt+0x34>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <vPortSetupTimerInterrupt+0x38>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <vPortSetupTimerInterrupt+0x3c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	@ (8004c0c <vPortSetupTimerInterrupt+0x40>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <vPortSetupTimerInterrupt+0x44>)
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bee:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <vPortSetupTimerInterrupt+0x34>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e010 	.word	0xe000e010
 8004c04:	e000e018 	.word	0xe000e018
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	10624dd3 	.word	0x10624dd3
 8004c10:	e000e014 	.word	0xe000e014

08004c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c24 <vPortEnableVFP+0x10>
 8004c18:	6801      	ldr	r1, [r0, #0]
 8004c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c1e:	6001      	str	r1, [r0, #0]
 8004c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c22:	bf00      	nop
 8004c24:	e000ed88 	.word	0xe000ed88

08004c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d915      	bls.n	8004c66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c3a:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <vPortValidateInterruptPriority+0x74>)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c44:	4b16      	ldr	r3, [pc, #88]	@ (8004ca0 <vPortValidateInterruptPriority+0x78>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	7afa      	ldrb	r2, [r7, #11]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d20b      	bcs.n	8004c66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c66:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <vPortValidateInterruptPriority+0x7c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca8 <vPortValidateInterruptPriority+0x80>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d90b      	bls.n	8004c8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	603b      	str	r3, [r7, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <vPortValidateInterruptPriority+0x62>
	}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	e000e3f0 	.word	0xe000e3f0
 8004ca0:	20000eb8 	.word	0x20000eb8
 8004ca4:	e000ed0c 	.word	0xe000ed0c
 8004ca8:	20000ebc 	.word	0x20000ebc

08004cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb8:	f7fe fd78 	bl	80037ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e30 <pvPortMalloc+0x184>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc4:	f000 f924 	bl	8004f10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e34 <pvPortMalloc+0x188>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 8095 	bne.w	8004e00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cdc:	2208      	movs	r2, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d015      	beq.n	8004d1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <pvPortMalloc+0x6e>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d06f      	beq.n	8004e00 <pvPortMalloc+0x154>
 8004d20:	4b45      	ldr	r3, [pc, #276]	@ (8004e38 <pvPortMalloc+0x18c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d86a      	bhi.n	8004e00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d2a:	4b44      	ldr	r3, [pc, #272]	@ (8004e3c <pvPortMalloc+0x190>)
 8004d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d2e:	4b43      	ldr	r3, [pc, #268]	@ (8004e3c <pvPortMalloc+0x190>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d34:	e004      	b.n	8004d40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d903      	bls.n	8004d52 <pvPortMalloc+0xa6>
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f1      	bne.n	8004d36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d52:	4b37      	ldr	r3, [pc, #220]	@ (8004e30 <pvPortMalloc+0x184>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d051      	beq.n	8004e00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	4413      	add	r3, r2
 8004d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	2308      	movs	r3, #8
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d920      	bls.n	8004dc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <pvPortMalloc+0xfc>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dba:	69b8      	ldr	r0, [r7, #24]
 8004dbc:	f000 f90a 	bl	8004fd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <pvPortMalloc+0x18c>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	4a1b      	ldr	r2, [pc, #108]	@ (8004e38 <pvPortMalloc+0x18c>)
 8004dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dce:	4b1a      	ldr	r3, [pc, #104]	@ (8004e38 <pvPortMalloc+0x18c>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <pvPortMalloc+0x194>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d203      	bcs.n	8004de2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dda:	4b17      	ldr	r3, [pc, #92]	@ (8004e38 <pvPortMalloc+0x18c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <pvPortMalloc+0x194>)
 8004de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	4b13      	ldr	r3, [pc, #76]	@ (8004e34 <pvPortMalloc+0x188>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004df6:	4b13      	ldr	r3, [pc, #76]	@ (8004e44 <pvPortMalloc+0x198>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a11      	ldr	r2, [pc, #68]	@ (8004e44 <pvPortMalloc+0x198>)
 8004dfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e00:	f7fe fce2 	bl	80037c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <pvPortMalloc+0x17a>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60fb      	str	r3, [r7, #12]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <pvPortMalloc+0x176>
	return pvReturn;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	@ 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20001ac8 	.word	0x20001ac8
 8004e34:	20001adc 	.word	0x20001adc
 8004e38:	20001acc 	.word	0x20001acc
 8004e3c:	20001ac0 	.word	0x20001ac0
 8004e40:	20001ad0 	.word	0x20001ad0
 8004e44:	20001ad4 	.word	0x20001ad4

08004e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04f      	beq.n	8004efa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	425b      	negs	r3, r3
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4b25      	ldr	r3, [pc, #148]	@ (8004f04 <vPortFree+0xbc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <vPortFree+0x46>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	e7fd      	b.n	8004e8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <vPortFree+0x66>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60bb      	str	r3, [r7, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <vPortFree+0xbc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01e      	beq.n	8004efa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11a      	bne.n	8004efa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <vPortFree+0xbc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ed4:	f7fe fc6a 	bl	80037ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <vPortFree+0xc0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4a09      	ldr	r2, [pc, #36]	@ (8004f08 <vPortFree+0xc0>)
 8004ee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ee6:	6938      	ldr	r0, [r7, #16]
 8004ee8:	f000 f874 	bl	8004fd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004eec:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <vPortFree+0xc4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <vPortFree+0xc4>)
 8004ef4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ef6:	f7fe fc67 	bl	80037c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20001adc 	.word	0x20001adc
 8004f08:	20001acc 	.word	0x20001acc
 8004f0c:	20001ad8 	.word	0x20001ad8

08004f10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f1c:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <prvHeapInit+0xac>)
 8004f1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3307      	adds	r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fbc <prvHeapInit+0xac>)
 8004f40:	4413      	add	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <prvHeapInit+0xb0>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc0 <prvHeapInit+0xb0>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <prvHeapInit+0xb4>)
 8004f70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <prvHeapInit+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f7a:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <prvHeapInit+0xb4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <prvHeapInit+0xb4>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <prvHeapInit+0xb8>)
 8004f9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <prvHeapInit+0xbc>)
 8004fa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa8:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <prvHeapInit+0xc0>)
 8004faa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fae:	601a      	str	r2, [r3, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000ec0 	.word	0x20000ec0
 8004fc0:	20001ac0 	.word	0x20001ac0
 8004fc4:	20001ac8 	.word	0x20001ac8
 8004fc8:	20001ad0 	.word	0x20001ad0
 8004fcc:	20001acc 	.word	0x20001acc
 8004fd0:	20001adc 	.word	0x20001adc

08004fd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fdc:	4b28      	ldr	r3, [pc, #160]	@ (8005080 <prvInsertBlockIntoFreeList+0xac>)
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e002      	b.n	8004fe8 <prvInsertBlockIntoFreeList+0x14>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d8f7      	bhi.n	8004fe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d108      	bne.n	8005016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	441a      	add	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d118      	bne.n	800505c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <prvInsertBlockIntoFreeList+0xb0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d00d      	beq.n	8005052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e008      	b.n	8005064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005052:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <prvInsertBlockIntoFreeList+0xb0>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e003      	b.n	8005064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	d002      	beq.n	8005072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20001ac0 	.word	0x20001ac0
 8005084:	20001ac8 	.word	0x20001ac8

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <_reclaim_reent>:
 8005098:	4b29      	ldr	r3, [pc, #164]	@ (8005140 <_reclaim_reent+0xa8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4283      	cmp	r3, r0
 800509e:	b570      	push	{r4, r5, r6, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	d04b      	beq.n	800513c <_reclaim_reent+0xa4>
 80050a4:	69c3      	ldr	r3, [r0, #28]
 80050a6:	b1ab      	cbz	r3, 80050d4 <_reclaim_reent+0x3c>
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	b16b      	cbz	r3, 80050c8 <_reclaim_reent+0x30>
 80050ac:	2500      	movs	r5, #0
 80050ae:	69e3      	ldr	r3, [r4, #28]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	5959      	ldr	r1, [r3, r5]
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d13b      	bne.n	8005130 <_reclaim_reent+0x98>
 80050b8:	3504      	adds	r5, #4
 80050ba:	2d80      	cmp	r5, #128	@ 0x80
 80050bc:	d1f7      	bne.n	80050ae <_reclaim_reent+0x16>
 80050be:	69e3      	ldr	r3, [r4, #28]
 80050c0:	4620      	mov	r0, r4
 80050c2:	68d9      	ldr	r1, [r3, #12]
 80050c4:	f000 f872 	bl	80051ac <_free_r>
 80050c8:	69e3      	ldr	r3, [r4, #28]
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	b111      	cbz	r1, 80050d4 <_reclaim_reent+0x3c>
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 f86c 	bl	80051ac <_free_r>
 80050d4:	6961      	ldr	r1, [r4, #20]
 80050d6:	b111      	cbz	r1, 80050de <_reclaim_reent+0x46>
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 f867 	bl	80051ac <_free_r>
 80050de:	69e1      	ldr	r1, [r4, #28]
 80050e0:	b111      	cbz	r1, 80050e8 <_reclaim_reent+0x50>
 80050e2:	4620      	mov	r0, r4
 80050e4:	f000 f862 	bl	80051ac <_free_r>
 80050e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050ea:	b111      	cbz	r1, 80050f2 <_reclaim_reent+0x5a>
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 f85d 	bl	80051ac <_free_r>
 80050f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050f4:	b111      	cbz	r1, 80050fc <_reclaim_reent+0x64>
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f858 	bl	80051ac <_free_r>
 80050fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050fe:	b111      	cbz	r1, 8005106 <_reclaim_reent+0x6e>
 8005100:	4620      	mov	r0, r4
 8005102:	f000 f853 	bl	80051ac <_free_r>
 8005106:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005108:	b111      	cbz	r1, 8005110 <_reclaim_reent+0x78>
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f84e 	bl	80051ac <_free_r>
 8005110:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005112:	b111      	cbz	r1, 800511a <_reclaim_reent+0x82>
 8005114:	4620      	mov	r0, r4
 8005116:	f000 f849 	bl	80051ac <_free_r>
 800511a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800511c:	b111      	cbz	r1, 8005124 <_reclaim_reent+0x8c>
 800511e:	4620      	mov	r0, r4
 8005120:	f000 f844 	bl	80051ac <_free_r>
 8005124:	6a23      	ldr	r3, [r4, #32]
 8005126:	b14b      	cbz	r3, 800513c <_reclaim_reent+0xa4>
 8005128:	4620      	mov	r0, r4
 800512a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800512e:	4718      	bx	r3
 8005130:	680e      	ldr	r6, [r1, #0]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f83a 	bl	80051ac <_free_r>
 8005138:	4631      	mov	r1, r6
 800513a:	e7bb      	b.n	80050b4 <_reclaim_reent+0x1c>
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	bf00      	nop
 8005140:	20000010 	.word	0x20000010

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4d0d      	ldr	r5, [pc, #52]	@ (800517c <__libc_init_array+0x38>)
 8005148:	4c0d      	ldr	r4, [pc, #52]	@ (8005180 <__libc_init_array+0x3c>)
 800514a:	1b64      	subs	r4, r4, r5
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	2600      	movs	r6, #0
 8005150:	42a6      	cmp	r6, r4
 8005152:	d109      	bne.n	8005168 <__libc_init_array+0x24>
 8005154:	4d0b      	ldr	r5, [pc, #44]	@ (8005184 <__libc_init_array+0x40>)
 8005156:	4c0c      	ldr	r4, [pc, #48]	@ (8005188 <__libc_init_array+0x44>)
 8005158:	f000 f87e 	bl	8005258 <_init>
 800515c:	1b64      	subs	r4, r4, r5
 800515e:	10a4      	asrs	r4, r4, #2
 8005160:	2600      	movs	r6, #0
 8005162:	42a6      	cmp	r6, r4
 8005164:	d105      	bne.n	8005172 <__libc_init_array+0x2e>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	f855 3b04 	ldr.w	r3, [r5], #4
 800516c:	4798      	blx	r3
 800516e:	3601      	adds	r6, #1
 8005170:	e7ee      	b.n	8005150 <__libc_init_array+0xc>
 8005172:	f855 3b04 	ldr.w	r3, [r5], #4
 8005176:	4798      	blx	r3
 8005178:	3601      	adds	r6, #1
 800517a:	e7f2      	b.n	8005162 <__libc_init_array+0x1e>
 800517c:	080052d0 	.word	0x080052d0
 8005180:	080052d0 	.word	0x080052d0
 8005184:	080052d0 	.word	0x080052d0
 8005188:	080052d4 	.word	0x080052d4

0800518c <__retarget_lock_acquire_recursive>:
 800518c:	4770      	bx	lr

0800518e <__retarget_lock_release_recursive>:
 800518e:	4770      	bx	lr

08005190 <memcpy>:
 8005190:	440a      	add	r2, r1
 8005192:	4291      	cmp	r1, r2
 8005194:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005198:	d100      	bne.n	800519c <memcpy+0xc>
 800519a:	4770      	bx	lr
 800519c:	b510      	push	{r4, lr}
 800519e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a6:	4291      	cmp	r1, r2
 80051a8:	d1f9      	bne.n	800519e <memcpy+0xe>
 80051aa:	bd10      	pop	{r4, pc}

080051ac <_free_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4605      	mov	r5, r0
 80051b0:	2900      	cmp	r1, #0
 80051b2:	d041      	beq.n	8005238 <_free_r+0x8c>
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f0c      	subs	r4, r1, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfb8      	it	lt
 80051be:	18e4      	addlt	r4, r4, r3
 80051c0:	f000 f83e 	bl	8005240 <__malloc_lock>
 80051c4:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <_free_r+0x90>)
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	b933      	cbnz	r3, 80051d8 <_free_r+0x2c>
 80051ca:	6063      	str	r3, [r4, #4]
 80051cc:	6014      	str	r4, [r2, #0]
 80051ce:	4628      	mov	r0, r5
 80051d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d4:	f000 b83a 	b.w	800524c <__malloc_unlock>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d908      	bls.n	80051ee <_free_r+0x42>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	1821      	adds	r1, r4, r0
 80051e0:	428b      	cmp	r3, r1
 80051e2:	bf01      	itttt	eq
 80051e4:	6819      	ldreq	r1, [r3, #0]
 80051e6:	685b      	ldreq	r3, [r3, #4]
 80051e8:	1809      	addeq	r1, r1, r0
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	e7ed      	b.n	80051ca <_free_r+0x1e>
 80051ee:	461a      	mov	r2, r3
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b10b      	cbz	r3, 80051f8 <_free_r+0x4c>
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d9fa      	bls.n	80051ee <_free_r+0x42>
 80051f8:	6811      	ldr	r1, [r2, #0]
 80051fa:	1850      	adds	r0, r2, r1
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d10b      	bne.n	8005218 <_free_r+0x6c>
 8005200:	6820      	ldr	r0, [r4, #0]
 8005202:	4401      	add	r1, r0
 8005204:	1850      	adds	r0, r2, r1
 8005206:	4283      	cmp	r3, r0
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	d1e0      	bne.n	80051ce <_free_r+0x22>
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	6053      	str	r3, [r2, #4]
 8005212:	4408      	add	r0, r1
 8005214:	6010      	str	r0, [r2, #0]
 8005216:	e7da      	b.n	80051ce <_free_r+0x22>
 8005218:	d902      	bls.n	8005220 <_free_r+0x74>
 800521a:	230c      	movs	r3, #12
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	e7d6      	b.n	80051ce <_free_r+0x22>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	1821      	adds	r1, r4, r0
 8005224:	428b      	cmp	r3, r1
 8005226:	bf04      	itt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	bf04      	itt	eq
 8005230:	1809      	addeq	r1, r1, r0
 8005232:	6021      	streq	r1, [r4, #0]
 8005234:	6054      	str	r4, [r2, #4]
 8005236:	e7ca      	b.n	80051ce <_free_r+0x22>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	bf00      	nop
 800523c:	20001c1c 	.word	0x20001c1c

08005240 <__malloc_lock>:
 8005240:	4801      	ldr	r0, [pc, #4]	@ (8005248 <__malloc_lock+0x8>)
 8005242:	f7ff bfa3 	b.w	800518c <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	20001c18 	.word	0x20001c18

0800524c <__malloc_unlock>:
 800524c:	4801      	ldr	r0, [pc, #4]	@ (8005254 <__malloc_unlock+0x8>)
 800524e:	f7ff bf9e 	b.w	800518e <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	20001c18 	.word	0x20001c18

08005258 <_init>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr

08005264 <_fini>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr
